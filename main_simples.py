#!/usr/bin/env python3
"""
Bot Telegram Garimpeiro Geek - Vers√£o Simplificada
Executa bot polling e sistema autom√°tico de ofertas em paralelo
"""
import asyncio
import os
import sys
import time
import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.error import NetworkError, TimedOut

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Importa m√≥dulos do projeto
from telegram_poster import publicar_oferta_automatica
from orchestrator import coletar_e_publicar

# Configura√ß√µes
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
DRY_RUN = os.getenv("DRY_RUN", "0") == "1"

if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN n√£o encontrado no .env")
    sys.exit(1)

if not TELEGRAM_CHAT_ID:
    logger.error("‚ùå TELEGRAM_CHAT_ID n√£o encontrado no .env")
    sys.exit(1)

# Contexto simulado para publicar_oferta_automatica
class ContextoSimulado:
    def __init__(self):
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN n√£o pode ser None")
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.job = None

# ===== HANDLERS DOS COMANDOS =====

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start"""
    await update.message.reply_text(
        "üöÄ **Garimpeiro Geek Bot Ativado!**\n\n"
        "Comandos dispon√≠veis:\n"
        "/start - Inicia o bot\n"
        "/health - Status do sistema\n"
        "/status - Status das ofertas\n"
        "/coletar - Executa coleta manual\n"
        "/dryrun - Testa sem publicar\n\n"
        "O bot est√° rodando automaticamente! üéØ",
        parse_mode="Markdown"
    )

async def cmd_health(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /health - Status do sistema"""
    try:
        # Verifica vari√°veis de ambiente
        def ok(k): 
            v = os.getenv(k, "")
            return "‚úÖ OK" if v and v.strip() else "‚ùå NOK"
        
        # Conta ofertas das √∫ltimas 24h (simulado por enquanto)
        try:
            # Simula contagem de ofertas (implementar fun√ß√£o real depois)
            n_24h = 0  # Placeholder
        except Exception:
            n_24h = -1
        
        # Status dos scrapers
        scraper_status = "‚úÖ Ativos" if not DRY_RUN else "üîÑ Modo Teste"
        
        msg = (
            "üè• **Healthcheck do Sistema**\n\n"
            "**üîë Configura√ß√µes:**\n"
            f"‚Ä¢ Bot Token: {ok('TELEGRAM_BOT_TOKEN')}\n"
            f"‚Ä¢ Chat ID: {ok('TELEGRAM_CHAT_ID')}\n"
            f"‚Ä¢ Amazon: {ok('AMAZON_ASSOCIATE_TAG')}\n"
            f"‚Ä¢ AWIN: {ok('AWIN_API_TOKEN')}\n"
            f"‚Ä¢ Shopee: {ok('SHOPEE_API_KEY')}\n"
            f"‚Ä¢ AliExpress: {ok('ALIEXPRESS_APP_KEY')}\n\n"
            "**üìä Status:**\n"
            f"‚Ä¢ Scrapers: {scraper_status}\n"
            f"‚Ä¢ Ofertas (24h): {n_24h if n_24h >= 0 else 'N/A'}\n"
            f"‚Ä¢ DRY_RUN: {'Sim' if DRY_RUN else 'N√£o'}\n"
            f"‚Ä¢ Timestamp: {time.strftime('%d/%m/%Y %H:%M:%S')}\n\n"
            "üéØ Sistema funcionando normalmente!"
        )
        
        await update.message.reply_text(msg, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Erro no comando health: {e}")
        await update.message.reply_text("‚ùå Erro ao verificar status do sistema")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /status - Status das ofertas"""
    try:
        # Simula status das ofertas
        msg = (
            "üìä **Status das Ofertas**\n\n"
            "**üîÑ Sistema Autom√°tico:**\n"
            "‚Ä¢ Status: ‚úÖ Ativo\n"
            "‚Ä¢ Intervalo: 30 minutos\n"
            "‚Ä¢ √öltima execu√ß√£o: Em execu√ß√£o...\n\n"
            "**üìà Estat√≠sticas:**\n"
            "‚Ä¢ Scrapers ativos: 2 (Promobit, Pelando)\n"
            "‚Ä¢ Modo: {'Teste' if DRY_RUN else 'Produ√ß√£o'}\n"
            "‚Ä¢ Rate limit: 250ms entre posts\n\n"
            "üéØ Use /coletar para execu√ß√£o manual!"
        )
        
        await update.message.reply_text(msg, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Erro no comando status: {e}")
        await update.message.reply_text("‚ùå Erro ao verificar status das ofertas")

async def cmd_coletar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /coletar - Executa coleta manual"""
    try:
        await update.message.reply_text("üîÑ Iniciando coleta manual...")
        
        # Executa orquestrador
        resultado = await coletar_e_publicar(
            dry_run=DRY_RUN,
            limit_por_scraper=10  # Limita para teste manual
        )
        
        msg = (
            "‚úÖ **Coleta Manual Conclu√≠da!**\n\n"
            f"**üìä Resultados:**\n"
            f"‚Ä¢ Ofertas coletadas: {resultado['coletadas']}\n"
            f"‚Ä¢ Ofertas aprovadas: {resultado['aprovadas']}\n"
            f"‚Ä¢ Ofertas publicadas: {resultado['publicadas']}\n"
            f"‚Ä¢ Scrapers executados: {resultado['scrapers_executados']}\n"
            f"‚Ä¢ DRY_RUN: {'Sim' if resultado['dry_run'] else 'N√£o'}\n\n"
            "üéØ Coleta executada com sucesso!"
        )
        
        await update.message.reply_text(msg, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Erro no comando coletar: {e}")
        await update.message.reply_text(f"‚ùå Erro na coleta: {str(e)}")

async def cmd_dryrun(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /dryrun - Testa sem publicar"""
    try:
        await update.message.reply_text("üß™ Iniciando teste DRY_RUN...")
        
        # Executa orquestrador em modo teste
        resultado = await coletar_e_publicar(
            dry_run=True,  # For√ßa DRY_RUN
            limit_por_scraper=5  # Limita para teste
        )
        
        msg = (
            "üß™ **Teste DRY_RUN Conclu√≠do!**\n\n"
            f"**üìä Resultados:**\n"
            f"‚Ä¢ Ofertas coletadas: {resultado['coletadas']}\n"
            f"‚Ä¢ Ofertas aprovadas: {resultado['aprovadas']}\n"
            f"‚Ä¢ Ofertas publicadas: {resultado['publicadas']} (simulado)\n"
            f"‚Ä¢ Scrapers executados: {resultado['scrapers_executados']}\n"
            f"‚Ä¢ DRY_RUN: Sim ‚úÖ\n\n"
            "üéØ Nenhuma oferta foi publicada (modo teste)!"
        )
        
        await update.message.reply_text(msg, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Erro no comando dryrun: {e}")
        await update.message.reply_text(f"‚ùå Erro no teste: {str(e)}")

# ===== JOB AUTOM√ÅTICO =====

async def job_coletar_automatico(context: ContextTypes.DEFAULT_TYPE):
    """Job peri√≥dico para coleta autom√°tica de ofertas"""
    try:
        logger.info("üîÑ [JOB] Iniciando coleta autom√°tica de ofertas...")
        
        resultado = await coletar_e_publicar(
            dry_run=DRY_RUN,
            limit_por_scraper=20
        )
        
        logger.info(f"‚úÖ [JOB] Coleta autom√°tica conclu√≠da: {resultado}")
        
        # Log detalhado do resultado
        if resultado['aprovadas'] > 0:
            logger.info(f"üì§ [JOB] {resultado['publicadas']} ofertas publicadas com sucesso")
        else:
            logger.warning("‚ö†Ô∏è [JOB] Nenhuma oferta foi aprovada/publicada")
            
    except Exception as e:
        logger.exception(f"‚ùå [JOB] Erro na coleta autom√°tica: {e}")

# ===== CONFIGURA√á√ÉO DOS HANDLERS =====

def setup_handlers(app: Application):
    """Configura todos os handlers do bot"""
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("health", cmd_health))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("coletar", cmd_coletar))
    app.add_handler(CommandHandler("dryrun", cmd_dryrun))
    
    logger.info("‚úÖ Handlers configurados com sucesso")

# ===== FUN√á√ÉO PRINCIPAL =====

async def main():
    """Fun√ß√£o principal do bot"""
    logger.info("üöÄ Iniciando Garimpeiro Geek Bot...")
    
    # Verifica token antes de criar aplica√ß√£o
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN n√£o pode ser None")
        return
    
    # Cria aplica√ß√£o
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Configura handlers
    setup_handlers(app)
    
    # Configura job peri√≥dico (a cada 30 minutos)
    app.job_queue.run_repeating(
        job_coletar_automatico, 
        interval=30*60,  # 30 minutos
        first=30  # Primeira execu√ß√£o em 30 segundos
    )
    
    logger.info("‚úÖ Job de coleta autom√°tica agendado (30 min)")
    logger.info(f"üîÑ Modo DRY_RUN: {'ATIVO' if DRY_RUN else 'DESATIVADO'}")
    
    # Inicia o bot
    logger.info("üéØ Bot iniciado! Pressione Ctrl+C para parar")
    
    try:
        await app.initialize()
        await app.start()
        await app.run_polling()
    except KeyboardInterrupt:
        logger.info("üõë Bot interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal no bot: {e}")
    finally:
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Programa interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        sys.exit(1)
