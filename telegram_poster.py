import logging
import re
from typing import Optional, Dict, Any, List

from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, BotCommand
from telegram.ext import ContextTypes, Application
from telegram.constants import ParseMode

import config
from database import adicionar_oferta_manual, adicionar_oferta, oferta_ja_existe, extrair_dominio_loja

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

def escape_markdown_v2(text: str) -> str:
    """
    Escapa o texto para o formato MarkdownV2 do Telegram.
    
    Args:
        text: Texto a ser escapado
        
    Returns:
        str: Texto escapado
    """
    if not text:
        return ""
        
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', str(text))

async def publicar_oferta(
    mensagem: str, 
    imagem_url: Optional[str] = None, 
    url_afiliado: Optional[str] = None,
    chat_id: Optional[str] = None,
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> bool:
    """
    Publica uma oferta no canal do Telegram.
    
    Args:
        mensagem: Texto formatado da oferta (j√° em MarkdownV2)
        imagem_url: URL da imagem da oferta (opcional)
        url_afiliado: URL de afiliado para o bot√£o (opcional)
        chat_id: ID do chat para publicar (opcional, usa o configurado por padr√£o)
        context: Contexto do bot (opcional, usado para obter a inst√¢ncia do bot)
        
    Returns:
        bool: True se a publica√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    # Obt√©m o bot do contexto
    if context is None or not hasattr(context, 'bot'):
        logger.error("Contexto inv√°lido ou sem inst√¢ncia do bot")
        return False
        
    bot = context.bot
        
    if not chat_id:
        chat_id = config.TELEGRAM_CHAT_ID
    
    try:
        # Cria o teclado inline se houver URL de afiliado
        reply_markup = None
        if url_afiliado:
            keyboard = [
                [
                    InlineKeyboardButton("üõí Ver Oferta", url=url_afiliado),
                    InlineKeyboardButton("üì¢ Ver Canal", url="https://t.me/garimpeirogeek")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Publica a oferta com ou sem imagem
        if imagem_url:
            # Tenta enviar a foto com legenda
            try:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=imagem_url,
                    caption=mensagem,
                    parse_mode=ParseMode.MARKDOWN_V2,
                    reply_markup=reply_markup
                )
                return True
            except Exception as e:
                logger.warning(f"Erro ao enviar foto, tentando apenas texto: {e}")
                # Se falhar, tenta enviar apenas o texto
        
        # Se n√£o tiver imagem ou falhar ao enviar a foto, envia apenas o texto
        await bot.send_message(
            chat_id=chat_id,
            text=mensagem,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=not bool(imagem_url),  # Desativa preview se tiver imagem
            reply_markup=reply_markup
        )
        
        return True
        
    except Exception as e:
        logger.error(f"Erro ao publicar oferta: {e}", exc_info=True)
        return False

async def comando_oferta(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Recebe um comando /oferta, formata e envia para o canal,
    restringindo o uso ao administrador.
    
    Formato: /oferta <link> <pre√ßo> <t√≠tulo completo>
    Exemplo: /oferta https://www.magazineluiza.com.br/notebook-dell-inspiron-3501/p/123456/te/1234/ 2999,90 Notebook Dell Inspiron 3501 i5 8GB 256GB SSD
    """
    try:
        # 1. Verificar se o comando veio de uma mensagem v√°lida
        if not update or not update.message or not update.effective_user:
            logger.warning("Comando /oferta recebido sem mensagem ou usu√°rio v√°lido")
            return

        # 2. Verificar se o usu√°rio √© o administrador
        user = update.effective_user
        if not user or not user.id:
            logger.warning("Usu√°rio n√£o encontrado ou ID inv√°lido em comando_oferta")
            return
            
        if str(user.id) != str(config.ADMIN_USER_ID):
            logger.warning(f"Acesso negado para o usu√°rio {user.id}")
            await update.message.reply_text("‚ùå Acesso negado. Apenas o administrador pode usar este comando.")
            return

        # 3. Verificar argumentos fornecidos
        if not context.args or len(context.args) < 3:
            logger.warning("Argumentos insuficientes para o comando /oferta")
            await update.message.reply_text(
                "‚ùå Formato incorreto!\n"
                "Uso: /oferta <link> <pre√ßo> <t√≠tulo completo>\n"
                "Exemplo: /oferta https://www.magazineluiza.com.br/notebook... R$2999,90 Notebook Dell Inspiron 3501"
            )
            return

        # 4. Extrair e validar os argumentos
        link = context.args[0].strip()
        preco = context.args[1].strip()
        titulo = " ".join(context.args[2:]).strip()
        
        # Valida√ß√µes b√°sicas
        if not link.startswith(('http://', 'https://')):
            await update.message.reply_text("‚ùå O link fornecido n√£o √© v√°lido. Certifique-se de incluir http:// ou https://")
            return
            
        if not any(char.isdigit() for char in preco):
            await update.message.reply_text("‚ùå O pre√ßo deve conter valores num√©ricos")
            return

        # 5. Extrair dom√≠nio da loja para identifica√ß√£o
        dominio_loja = extrair_dominio_loja(link)
        
        # 6. Preparar dados da oferta para o banco de dados
        oferta = {
            'url_produto': link,
            'titulo': titulo,
            'preco': preco,
            'loja': dominio_loja.capitalize(),
            'fonte': 'Comando',
            'url_fonte': link
        }
        
        # 7. Verificar se a oferta j√° existe
        if oferta_ja_existe(link):
            logger.info(f"Oferta j√° existe no banco de dados: {link}")
            await update.message.reply_text("‚ÑπÔ∏è Esta oferta j√° foi publicada anteriormente.")
            return

        # 8. Formatar a mensagem para o Telegram
        linhas = []
        
        # T√≠tulo
        linhas.append(f"üî• *{escape_markdown_v2(titulo)}*\n")
        
        # Pre√ßo (formato simples, j√° que n√£o temos pre√ßo original para o comando manual)
        linhas.append(f"üíµ *Pre√ßo:* {escape_markdown_v2(str(preco))}\n")
        
        # Loja
        linhas.append(f"üè™ *Loja:* {escape_markdown_v2(dominio_loja.capitalize())}")
        
        # Links
        linhas.append(f"\nüõí [Ver oferta]({link})")
        linhas.append(f"üîó [Gostou? Compartilhe!](https://t.me/share/url?url={link.replace('&', '%26')})")
        
        # Junta todas as linhas para formar a mensagem final
        mensagem = '\n'.join(linhas)

        # 9. Publicar a oferta
        sucesso = await publicar_oferta(
            mensagem=mensagem,
            url_afiliado=link,  # Ser√° convertido para link de afiliado se dispon√≠vel
            chat_id=config.TELEGRAM_CHAT_ID,
            context=context
        )
        
        # 10. Se a publica√ß√£o for bem-sucedida, salvar no banco de dados
        if sucesso:
            if adicionar_oferta(oferta):
                logger.info(f"Oferta adicionada via comando: {titulo}")
                await update.message.reply_text("‚úÖ Oferta publicada com sucesso!")
            else:
                logger.warning(f"Falha ao salvar oferta no banco de dados: {titulo}")
                await update.message.reply_text(
                    "‚ö†Ô∏è Oferta publicada, mas n√£o foi poss√≠vel salvar no banco de dados."
                )
        else:
            logger.error(f"Falha ao publicar oferta: {titulo}")
            await update.message.reply_text(
                "‚ùå Falha ao publicar a oferta. Verifique os logs para mais detalhes."
            )
            
    except Exception as e:
        logger.error(f"Erro ao processar comando /oferta: {e}", exc_info=True)
        if update and update.message:
            await update.message.reply_text(
                "‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente mais tarde."
            )

def calcular_desconto(preco_atual: str, preco_original: str) -> Optional[str]:
    """
    Calcula o percentual de desconto entre dois pre√ßos.
    
    Args:
        preco_atual: Pre√ßo atual como string (ex: 'R$ 1.999,90')
        preco_original: Pre√ßo original como string (ex: 'R$ 2.499,90')
        
    Returns:
        str: Percentual de desconto formatado (ex: '20%') ou None se n√£o for poss√≠vel calcular
    """
    try:
        # Remove caracteres n√£o num√©ricos, exceto v√≠rgula e ponto
        def parse_price(price_str):
            # Remove R$, espa√ßos e converte v√≠rgula para ponto
            clean = price_str.lower().replace('r$', '').replace(' ', '').replace('.', '').replace(',', '.')
            return float(clean) if clean else 0
        
        atual = parse_price(preco_atual)
        original = parse_price(preco_original)
        
        if atual > 0 and original > 0 and original > atual:
            desconto = ((original - atual) / original) * 100
            return f"{int(round(desconto))}%"
    except Exception as e:
        logger.warning(f"Erro ao calcular desconto: {e}")
    
    return None

async def publicar_oferta_automatica(
    oferta: Dict[str, Any], 
    context: Optional[ContextTypes.DEFAULT_TYPE] = None
) -> bool:
    """
    Publica automaticamente uma oferta no canal do Telegram.
    
    Esta fun√ß√£o √© usada para publicar ofertas encontradas automaticamente
    por scrapers ou APIs, como a da Amazon.
    
    Args:
        oferta: Dicion√°rio com os dados da oferta a ser publicada
        context: Contexto do bot do Telegram (opcional)
        
    Returns:
        bool: True se a publica√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    try:
        # Extrai os dados da oferta
        titulo = oferta.get('titulo', 'Oferta Especial')
        preco = oferta.get('preco', 'Pre√ßo n√£o dispon√≠vel')
        preco_original = oferta.get('preco_original')
        url = oferta.get('url_produto', '')
        imagem_url = oferta.get('imagem_url')
        loja = oferta.get('loja', 'Loja')
        menor_preco_historico = oferta.get('menor_preco_historico', False)
        
        # Calcula o desconto se houver pre√ßo original
        desconto = None
        if preco_original:
            desconto = calcular_desconto(str(preco), str(preco_original))
        
        # Constr√≥i a mensagem
        linhas = []
        
        # Adiciona destaque para menor pre√ßo hist√≥rico
        if menor_preco_historico:
            linhas.append("üî•üìâ *MENOR PRE√áO HIST√ìRICO!* üìâüî•\n")
        
        # T√≠tulo
        linhas.append(f"üî• *{escape_markdown_v2(titulo)}*\n")
        
        # Pre√ßos
        if preco_original and desconto:
            linhas.append(f"üí∞ *De ~{escape_markdown_v2(str(preco_original))}~ por")
            linhas.append(f"üíµ *Pre√ßo:* {escape_markdown_v2(str(preco))} (*{desconto} de desconto*)\n")
        else:
            linhas.append(f"üíµ *Pre√ßo:* {escape_markdown_v2(str(preco))}\n")
        
        # Loja
        linhas.append(f"üè™ *Loja:* {escape_markdown_v2(loja)}")
        
        # Links
        linhas.append(f"\nüõí [Ver oferta]({url})")
        linhas.append(f"üîó [Gostou? Compartilhe!](https://t.me/share/url?url={url.replace('&', '%26')})")
        
        # Junta todas as linhas para formar a mensagem final
        mensagem = '\n'.join(linhas)
        
        # Publica a oferta
        sucesso = await publicar_oferta(
            mensagem=mensagem,
            imagem_url=imagem_url,
            url_afiliado=url,
            context=context
        )
        
        if sucesso:
            logger.info(f"Oferta publicada com sucesso: {titulo}")
            
            # Notifica usu√°rios interessados se o sistema estiver dispon√≠vel
            try:
                from notification_system import notify_users_about_offer
                if context and hasattr(context, 'bot'):
                    notification_results = await notify_users_about_offer(context.bot, oferta)
                    if notification_results['notified_users'] > 0:
                        logger.info(f"üì¢ {notification_results['successful_notifications']} usu√°rios notificados sobre a oferta")
                    else:
                        logger.info("‚ÑπÔ∏è Nenhum usu√°rio interessado para notificar")
            except ImportError:
                logger.debug("Sistema de notifica√ß√µes n√£o dispon√≠vel")
            except Exception as e:
                logger.error(f"Erro ao notificar usu√°rios: {e}")
        else:
            logger.error(f"Falha ao publicar oferta: {titulo}")
            
        return sucesso
        
    except Exception as e:
        logger.error(f"Erro em publicar_oferta_automatica: {e}", exc_info=True)
        return False
