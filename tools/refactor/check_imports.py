#!/usr/bin/env python3
"""
Script de Verifica√ß√£o de Imports
Verifica se h√° imports n√£o resolvidos ap√≥s refatora√ß√£o
"""

import os
import re
import ast
from pathlib import Path
from typing import Dict, List, Set, Tuple
import logging

class ImportChecker:
    """Verificador de imports para detectar problemas"""
    
    def __init__(self, repo_root: Path):
        self.repo_root = repo_root
        self.unresolved_imports = []
        self.import_errors = []
        
        # Configurar logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.logger = logging.getLogger("import_checker")
        
        # M√≥dulos conhecidos (ap√≥s refatora√ß√£o)
        self.known_modules = {
            "src.core.scraper_registry",
            "src.core.normalize",
            "src.core.csv_exporter",
            "src.core.live_logs",
            "src.core.data_service",
            "src.core.rate_limiter",
            "src.core.logging_setup",
            "src.core.utils",
            "src.core.models",
            "src.core.settings",
            "src.core.storage",
            "src.core.database",
            "src.core.metrics",
            "src.core.affiliate_converter",
            "src.scrapers.base_scraper",
            "src.providers.base_api",
            "src.app.dashboard.dashboard",
            "src.app.bot.telegram_bot",
            "src.diagnostics.ui_reporter",
            "src.diagnostics.verify_snapshot",
            "src.diagnostics.smoke_sources",
            "src.posting.geek_auto_poster",
            "src.posting.notification_system",
            "src.recommender.price_comparator",
            "src.recommender.recommender",
            "src.recommender.rules",
        }
        
        # M√≥dulos de terceiros conhecidos
        self.third_party_modules = {
            "flet", "aiohttp", "asyncio", "logging", "json", "re", "shutil",
            "argparse", "pathlib", "typing", "datetime", "sqlite3", "psutil",
            "requests", "beautifulsoup4", "selenium", "playwright", "pandas",
            "numpy", "pydantic", "plotly", "python_telegram_bot", "click",
            "rich", "tqdm", "pytest", "black", "flake8", "mypy", "ruff"
        }
    
    def scan_python_files(self) -> List[Path]:
        """Escaneia todos os arquivos Python no reposit√≥rio"""
        python_files = []
        
        for root, dirs, files in os.walk(self.repo_root):
            # Pular diret√≥rios que n√£o devem ser escaneados
            dirs[:] = [d for d in dirs if d not in [
                '__pycache__', '.git', '.venv', 'venv', 'node_modules',
                'build', 'dist', '.pytest_cache', '.mypy_cache'
            ]]
            
            for file in files:
                if file.endswith('.py'):
                    python_files.append(Path(root) / file)
        
        return python_files
    
    def extract_imports_from_file(self, file_path: Path) -> List[Tuple[str, int, str]]:
        """Extrai imports de um arquivo Python"""
        imports = []
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Parse AST para extrair imports
            try:
                tree = ast.parse(content)
                
                for node in ast.walk(tree):
                    if isinstance(node, ast.Import):
                        for alias in node.names:
                            imports.append((alias.name, node.lineno, "import"))
                    
                    elif isinstance(node, ast.ImportFrom):
                        module = node.module or ""
                        for alias in node.names:
                            if module:
                                full_name = f"{module}.{alias.name}"
                            else:
                                full_name = alias.name
                            imports.append((full_name, node.lineno, "from"))
                
            except SyntaxError as e:
                self.logger.warning(f"Erro de sintaxe em {file_path}: {e}")
                # Fallback: usar regex para imports b√°sicos
                import_pattern = r'^(?:from\s+(\S+)\s+import|import\s+(\S+))'
                for line_num, line in enumerate(content.split('\n'), 1):
                    match = re.match(import_pattern, line.strip())
                    if match:
                        module = match.group(1) or match.group(2)
                        if module:
                            imports.append((module, line_num, "regex_fallback"))
        
        except Exception as e:
            self.logger.error(f"Erro ao ler {file_path}: {e}")
        
        return imports
    
    def check_import_resolution(self, import_name: str, file_path: Path) -> bool:
        """Verifica se um import pode ser resolvido"""
        # Verificar se √© um m√≥dulo conhecido
        if import_name in self.known_modules:
            return True
        
        # Verificar se √© um m√≥dulo de terceiros
        if import_name in self.third_party_modules:
            return True
        
        # Verificar se √© um m√≥dulo de terceiros com submodules
        base_module = import_name.split('.')[0]
        if base_module in self.third_party_modules:
            return True
        
        # Verificar se √© um m√≥dulo relativo
        if import_name.startswith('.'):
            return True
        
        # Verificar se √© um m√≥dulo built-in
        try:
            __import__(import_name)
            return True
        except ImportError:
            pass
        
        # Verificar se o arquivo existe no sistema
        module_parts = import_name.split('.')
        possible_paths = []
        
        # Tentar diferentes localiza√ß√µes
        for i in range(len(module_parts), 0, -1):
            module_path = '.'.join(module_parts[:i])
            possible_paths.extend([
                self.repo_root / f"{module_path}.py",
                self.repo_root / module_path / "__init__.py",
                self.repo_root / "src" / f"{module_path}.py",
                self.repo_root / "src" / module_path / "__init__.py",
            ])
        
        for path in possible_paths:
            if path.exists():
                return True
        
        return False
    
    def check_file_imports(self, file_path: Path) -> List[Dict]:
        """Verifica imports de um arquivo espec√≠fico"""
        issues = []
        imports = self.extract_imports_from_file(file_path)
        
        for import_name, line_num, import_type in imports:
            if not self.check_import_resolution(import_name, file_path):
                issue = {
                    'file': str(file_path),
                    'line': line_num,
                    'import': import_name,
                    'type': import_type,
                    'severity': 'error'
                }
                issues.append(issue)
                self.unresolved_imports.append(import_name)
        
        return issues
    
    def check_all_imports(self) -> Dict[str, List]:
        """Verifica imports em todos os arquivos Python"""
        all_issues = []
        python_files = self.scan_python_files()
        
        self.logger.info(f"üîç Verificando imports em {len(python_files)} arquivos Python...")
        
        for file_path in python_files:
            issues = self.check_file_imports(file_path)
            all_issues.extend(issues)
            
            if issues:
                self.logger.warning(f"‚ö†Ô∏è {len(issues)} problemas encontrados em {file_path}")
        
        # Agrupar por severidade
        grouped_issues = {
            'errors': [i for i in all_issues if i['severity'] == 'error'],
            'warnings': [i for i in all_issues if i['severity'] == 'warning']
        }
        
        return grouped_issues
    
    def generate_report(self, issues: Dict[str, List]) -> str:
        """Gera relat√≥rio de verifica√ß√£o de imports"""
        report = []
        report.append("# üîç Relat√≥rio de Verifica√ß√£o de Imports")
        report.append("")
        report.append(f"**Data:** {Path().cwd()}")
        report.append("")
        
        # Resumo
        total_errors = len(issues.get('errors', []))
        total_warnings = len(issues.get('warnings', []))
        
        report.append("## üìä Resumo")
        report.append(f"- Total de problemas: {total_errors + total_warnings}")
        report.append(f"- Erros: {total_errors}")
        report.append(f"- Avisos: {total_warnings}")
        report.append("")
        
        if total_errors == 0 and total_warnings == 0:
            report.append("‚úÖ **Todos os imports est√£o resolvidos!**")
            report.append("")
        else:
            # Imports n√£o resolvidos
            if issues.get('errors'):
                report.append("## ‚ùå Imports N√£o Resolvidos")
                report.append("")
                
                # Agrupar por arquivo
                by_file = {}
                for issue in issues['errors']:
                    file_path = issue['file']
                    if file_path not in by_file:
                        by_file[file_path] = []
                    by_file[file_path].append(issue)
                
                for file_path, file_issues in by_file.items():
                    report.append(f"### üìÅ {file_path}")
                    report.append("")
                    
                    for issue in file_issues:
                        report.append(f"- **Linha {issue['line']}:** `{issue['import']}` ({issue['type']})")
                    
                    report.append("")
            
            # Avisos
            if issues.get('warnings'):
                report.append("## ‚ö†Ô∏è Avisos")
                report.append("")
                
                for issue in issues['warnings']:
                    report.append(f"- **{issue['file']}:{issue['line']}:** {issue['import']}")
                
                report.append("")
        
        # M√≥dulos n√£o resolvidos √∫nicos
        if self.unresolved_imports:
            unique_unresolved = list(set(self.unresolved_imports))
            report.append("## üîç M√≥dulos N√£o Resolvidos √önicos")
            report.append("")
            
            for module in sorted(unique_unresolved):
                report.append(f"- `{module}`")
            
            report.append("")
        
        # Recomenda√ß√µes
        report.append("## üöÄ Recomenda√ß√µes")
        if total_errors == 0:
            report.append("‚úÖ Todos os imports est√£o funcionando corretamente!")
            report.append("‚úÖ A refatora√ß√£o foi bem-sucedida!")
        else:
            report.append("üîß **A√ß√µes necess√°rias:**")
            report.append("1. Verificar se os m√≥dulos foram movidos corretamente")
            report.append("2. Atualizar imports que ainda referenciam caminhos antigos")
            report.append("3. Criar shims de compatibilidade se necess√°rio")
            report.append("4. Verificar se os arquivos __init__.py foram criados")
            report.append("5. Executar testes para verificar funcionamento")
        
        return "\n".join(report)
    
    def run_check(self) -> bool:
        """Executa verifica√ß√£o completa de imports"""
        self.logger.info("üöÄ Iniciando verifica√ß√£o de imports...")
        
        # Verificar imports
        issues = self.check_all_imports()
        
        # Gerar relat√≥rio
        report = self.generate_report(issues)
        
        # Salvar relat√≥rio
        report_file = self.repo_root / "tools/refactor/import_check_report.md"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        # Mostrar resumo
        print("\n" + "="*80)
        print(report)
        print("="*80)
        
        # Retornar sucesso (True se n√£o h√° erros)
        return len(issues.get('errors', [])) == 0

def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Verifica√ß√£o de Imports - Garimpeiro Geek")
    parser.add_argument("--repo-root", type=str, default=".", 
                       help="Diret√≥rio raiz do reposit√≥rio")
    parser.add_argument("--output", type=str, 
                       help="Arquivo de sa√≠da para o relat√≥rio")
    
    args = parser.parse_args()
    
    # Configurar diret√≥rio raiz
    repo_root = Path(args.repo_root).resolve()
    
    if not repo_root.exists():
        print(f"‚ùå Diret√≥rio n√£o encontrado: {repo_root}")
        return 1
    
    # Executar verifica√ß√£o
    try:
        checker = ImportChecker(repo_root)
        success = checker.run_check()
        
        if success:
            print("‚úÖ Verifica√ß√£o conclu√≠da com sucesso!")
            return 0
        else:
            print("‚ùå Problemas encontrados. Verifique o relat√≥rio.")
            return 1
        
    except Exception as e:
        print(f"‚ùå Erro durante verifica√ß√£o: {e}")
        return 1

if __name__ == "__main__":
    exit(main())

