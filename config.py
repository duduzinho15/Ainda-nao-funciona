# config.py
import os
from typing import List
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente do arquivo .env se existir
load_dotenv()

# Configura√ß√µes do Bot Telegram
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID", "")

# Configura√ß√µes de Rate Limiting
POST_RATE_DELAY_MS = int(os.getenv("POST_RATE_DELAY_MS", "250"))

# Configura√ß√µes do Banco de Dados
DB_NAME = os.getenv("DB_NAME", "ofertas.db")

# ===== FLAGS DE CONTROLE PARA SCRAPERS =====
ENABLE_PROMOBIT = os.getenv("ENABLE_PROMOBIT", "1") == "1"
ENABLE_PELANDO = os.getenv("ENABLE_PELANDO", "1") == "1"
ENABLE_SHOPEE = os.getenv("ENABLE_SHOPEE", "0") == "1"  # Desabilitado por padr√£o
ENABLE_AMAZON = os.getenv("ENABLE_AMAZON", "0") == "1"  # Desabilitado por padr√£o
ENABLE_ALIEXPRESS = os.getenv("ENABLE_ALIEXPRESS", "0") == "1"  # Desabilitado por padr√£o
ENABLE_MEPUC = os.getenv("ENABLE_MEPUC", "0") == "1"  # Desabilitado por padr√£o

# Configura√ß√µes da Amazon PA-API
AMAZON_ACCESS_KEY = os.getenv("AMAZON_ACCESS_KEY", "")
AMAZON_SECRET_KEY = os.getenv("AMAZON_SECRET_KEY", "")
AMAZON_ASSOCIATE_TAG = os.getenv("AMAZON_ASSOCIATE_TAG", "")
AMAZON_REGION = os.getenv("AMAZON_REGION", "us-east-1")

# Configura√ß√µes da API da Shopee
SHOPEE_API_KEY = os.getenv("SHOPEE_API_KEY", "")
SHOPEE_API_SECRET = os.getenv("SHOPEE_API_SECRET", "")

# Configura√ß√µes da API da AliExpress
ALIEXPRESS_APP_KEY = os.getenv("ALIEXPRESS_APP_KEY", "")
ALIEXPRESS_APP_SECRET = os.getenv("ALIEXPRESS_APP_SECRET", "")

# Configura√ß√µes da AWIN
AWIN_API_TOKEN = os.getenv("AWIN_API_TOKEN", "")

# Publisher IDs corretos do Eduardo:
AWIN_PUBLISHER_IDS = {
    "default": "2370719",   # COMFY BR, LG BR, Trocafy BR, Kabum BR
    "samsung": "2510157"    # Samsung BR
}
AWIN_PUBLISHER_ID = AWIN_PUBLISHER_IDS["default"]

# Configura√ß√µes de M√©tricas
METRICS_ENABLED = os.getenv("METRICS", "0") == "1"
METRICS_PORT = int(os.getenv("METRICS_PORT", "9308"))

# ===== VALIDA√á√ïES DE CONFIGURA√á√ÉO =====
def validate_config() -> List[str]:
    """Valida se as configura√ß√µes essenciais est√£o presentes"""
    errors: List[str] = []
    
    if not TELEGRAM_BOT_TOKEN:
        errors.append("TELEGRAM_BOT_TOKEN n√£o configurado")
    
    if not TELEGRAM_CHAT_ID:
        errors.append("TELEGRAM_CHAT_ID n√£o configurado")
    
    if ENABLE_AMAZON and not AMAZON_ASSOCIATE_TAG:
        errors.append("AMAZON_ASSOCIATE_TAG necess√°rio para Amazon")
    
    if ENABLE_SHOPEE and not SHOPEE_API_KEY:
        errors.append("SHOPEE_API_KEY necess√°rio para Shopee")
    
    if ENABLE_ALIEXPRESS and not ALIEXPRESS_APP_KEY:
        errors.append("ALIEXPRESS_APP_KEY necess√°rio para AliExpress")
    
    return errors

# ===== IMPRESS√ÉO DE STATUS =====
def print_config_status() -> None:
    """Imprime o status das configura√ß√µes"""
    print("üîß CONFIGURA√á√ïES DO SISTEMA GARIMPEIRO GEEK")
    print("=" * 50)
    
    # Status dos scrapers
    print(f"üìä Scrapers:")
    print(f"  Promobit: {'‚úÖ ATIVO' if ENABLE_PROMOBIT else '‚ùå DESABILITADO'}")
    print(f"  Pelando: {'‚úÖ ATIVO' if ENABLE_PELANDO else '‚ùå DESABILITADO'}")
    print(f"  Shopee: {'‚úÖ ATIVO' if ENABLE_SHOPEE else '‚ùå DESABILITADO'}")
    print(f"  Amazon: {'‚úÖ ATIVO' if ENABLE_AMAZON else '‚ùå DESABILITADO'}")
    print(f"  AliExpress: {'‚úÖ ATIVO' if ENABLE_ALIEXPRESS else '‚ùå DESABILITADO'}")
    print(f"  MeuPC.net: {'‚úÖ ATIVO' if ENABLE_MEPUC else '‚ùå DESABILITADO'}")
    
    # Status das APIs
    print(f"\nüîë APIs:")
    if ENABLE_AMAZON:
        print("‚úÖ Amazon PA-API configurada e ativada!")
    if ENABLE_SHOPEE:
        print("‚úÖ API da Shopee configurada e ativada!")
    if ENABLE_ALIEXPRESS:
        print("‚úÖ API da AliExpress configurada e ativada!")
    
    # Status das m√©tricas
    print(f"\nüìà M√©tricas:")
    print(f"  Prometheus: {'‚úÖ ATIVO' if METRICS_ENABLED else '‚ùå DESABILITADO'}")
    if METRICS_ENABLED:
        print(f"  Porta: {METRICS_PORT}")
    
    # Valida√ß√µes
    errors: List[str] = validate_config()
    if errors:
        print(f"\n‚ö†Ô∏è AVISOS:")
        for error in errors:
            print(f"  {error}")
    else:
        print(f"\n‚úÖ Configura√ß√£o v√°lida!")
    
    print("=" * 50)

# Executa valida√ß√£o se o arquivo for executado diretamente
if __name__ == "__main__":
    print_config_status()