"""
Script de teste simples para validar as funcionalidades b√°sicas do Garimpeiro Geek.
"""
import logging
import sqlite3
import requests
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('simple_test.log')
    ]
)
logger = logging.getLogger(__name__)

def test_database_connection():
    """Testa a conex√£o com o banco de dados."""
    logger.info("üîç Testando conex√£o com o banco de dados...")
    try:
        conn = sqlite3.connect('ofertas.db')
        cursor = conn.cursor()
        
        # Verifica se a tabela de ofertas existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='ofertas';")
        table_exists = cursor.fetchone() is not None
        
        if table_exists:
            logger.info("‚úÖ Tabela 'ofertas' encontrada no banco de dados")
        else:
            logger.warning("‚ö†Ô∏è Tabela 'ofertas' n√£o encontrada no banco de dados")
        
        # Conta o n√∫mero de ofertas no banco de dados
        cursor.execute("SELECT COUNT(*) FROM ofertas;")
        count = cursor.fetchone()[0]
        logger.info(f"üìä Total de ofertas no banco de dados: {count}")
        
        # Mostra as ofertas mais recentes
        if count > 0:
            cursor.execute("SELECT titulo, preco, loja, data_postagem FROM ofertas ORDER BY data_postagem DESC LIMIT 3;")
            logger.info("\nüìã √öltimas ofertas no banco de dados:")
            for titulo, preco, loja, data in cursor.fetchall():
                logger.info(f"   ‚Ä¢ {titulo} - {preco} ({loja}) - {data}")
        
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao acessar o banco de dados: {e}")
        return False

def test_magalu_scraper():
    """Testa o scraper do Magazine Luiza."""
    logger.info("\nüîç Testando o scraper do Magazine Luiza...")
    
    try:
        # Importa o m√≥dulo dinamicamente
        from magalu_scraper import buscar_ofertas_magalu
        
        # Busca ofertas na primeira p√°gina
        ofertas = buscar_ofertas_magalu(paginas=1)
        
        if not ofertas:
            logger.warning("‚ö†Ô∏è Nenhuma oferta encontrada no Magazine Luiza")
            return False
        
        logger.info(f"‚úÖ Encontradas {len(ofertas)} ofertas no Magazine Luiza")
        
        # Mostra detalhes das ofertas encontradas
        for i, oferta in enumerate(ofertas[:3], 1):  # Mostra apenas as 3 primeiras
            logger.info(f"\nüì¶ Oferta {i}:")
            logger.info(f"   T√≠tulo: {oferta.get('titulo')}")
            logger.info(f"   Pre√ßo: {oferta.get('preco')}")
            logger.info(f"   URL: {oferta.get('url_produto')}")
            logger.info(f"   Loja: {oferta.get('loja')}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar o scraper do Magazine Luiza: {e}")
        return False

def test_telegram_connection():
    """Testa a conex√£o com a API do Telegram."""
    logger.info("\nüì± Testando conex√£o com a API do Telegram...")
    
    try:
        # Tenta importar as configura√ß√µes do Telegram
        try:
            import config
            if not hasattr(config, 'TELEGRAM_BOT_TOKEN'):
                logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN n√£o definido no arquivo config.py")
                return False
            
            token = config.TELEGRAM_BOT_TOKEN
            
            # Faz uma requisi√ß√£o para a API do Telegram
            url = f"https://api.telegram.org/bot{token}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok') and data.get('result'):
                    bot_username = data['result'].get('username')
                    logger.info(f"‚úÖ Conex√£o com o bot @{bot_username} estabelecida com sucesso!")
                    return True
                else:
                    logger.error(f"‚ùå Resposta inesperada da API do Telegram: {data}")
            else:
                logger.error(f"‚ùå Falha na conex√£o com a API do Telegram. Status code: {response.status_code}")
                logger.error(f"Resposta: {response.text}")
            
        except ImportError:
            logger.error("‚ùå Arquivo config.py n√£o encontrado ou inv√°lido")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar a conex√£o com o Telegram: {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    logger.info("üöÄ Iniciando testes do Garimpeiro Geek")
    logger.info("=" * 60)
    
    # Executa os testes
    testes = [
        ("Banco de Dados", test_database_connection()),
        ("Scraper Magazine Luiza", test_magalu_scraper()),
        ("Conex√£o com o Telegram", test_telegram_connection())
    ]
    
    # Exibe o resumo
    logger.info("\nüìä RESUMO DOS TESTES")
    logger.info("=" * 60)
    
    todos_passaram = True
    for nome, resultado in testes:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        logger.info(f"{status} - {nome}")
        if not resultado:
            todos_passaram = False
    
    if todos_passaram:
        logger.info("\nüéâ Todos os testes foram conclu√≠dos com sucesso!")
    else:
        logger.warning("\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs para mais detalhes.")
    
    logger.info("\nüîç Consulte o arquivo simple_test.log para ver o relat√≥rio completo.")

if __name__ == "__main__":
    main()
