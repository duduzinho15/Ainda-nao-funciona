#!/usr/bin/env python3
"""
Script de Instala√ß√£o do Garimpeiro Geek
Instala todas as depend√™ncias e configura o ambiente
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command: str, description: str) -> bool:
    """Executa um comando e retorna sucesso/falha"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro em {description}: {e}")
        if e.stdout:
            print(f"Sa√≠da: {e.stdout}")
        if e.stderr:
            print(f"Erro: {e.stderr}")
        return False

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"Vers√£o atual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} detectado")
    return True

def install_dependencies():
    """Instala as depend√™ncias do projeto"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    # Atualizar pip
    if not run_command("python -m pip install --upgrade pip", "Atualizando pip"):
        return False
    
    # Instalar depend√™ncias principais
    if not run_command("pip install -r requirements.txt", "Instalando depend√™ncias principais"):
        return False
    
    # Instalar playwright browsers
    if not run_command("playwright install", "Instalando navegadores Playwright"):
        print("‚ö†Ô∏è Playwright pode ser instalado manualmente depois")
    
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    directories = [
        ".data",
        ".data/config",
        ".data/logs",
        "exports",
        "backups",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ Diret√≥rio criado: {directory}")

def setup_environment():
    """Configura o ambiente de desenvolvimento"""
    print("\n‚öôÔ∏è Configurando ambiente...")
    
    # Criar arquivo .env se n√£o existir
    env_file = Path(".env")
    if not env_file.exists():
        env_example = Path("env_example.txt")
        if env_example.exists():
            with open(env_example, 'r') as f:
                content = f.read()
            
            # Converter para formato .env
            env_content = content.replace("# ", "").replace("=seu_token_aqui", "=")
            
            with open(env_file, 'w') as f:
                f.write(env_content)
            
            print("‚úÖ Arquivo .env criado a partir do template")
        else:
            print("‚ö†Ô∏è Template .env n√£o encontrado")
    
    # Verificar se h√° arquivo .env
    if env_file.exists():
        print("‚úÖ Arquivo .env configurado")
    else:
        print("‚ö†Ô∏è Configure manualmente o arquivo .env")

def run_tests():
    """Executa os testes automatizados"""
    print("\nüß™ Executando testes...")
    
    if not run_command("python -m pytest tests/ -v", "Executando testes"):
        print("‚ö†Ô∏è Alguns testes falharam, mas a instala√ß√£o pode continuar")
        return False
    
    return True

def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    print("üöÄ Instalador do Garimpeiro Geek")
    print("=" * 50)
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Criar diret√≥rios
    create_directories()
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("‚ùå Falha na instala√ß√£o das depend√™ncias")
        sys.exit(1)
    
    # Configurar ambiente
    setup_environment()
    
    # Executar testes
    run_tests()
    
    print("\nüéâ Instala√ß√£o conclu√≠da com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure suas chaves de API no arquivo .env")
    print("2. Execute 'python app/dashboard.py' para testar o dashboard")
    print("3. Configure o bot Telegram se desejar")
    print("4. Execute os scrapers para coletar ofertas")
    
    print("\nüîó Links √∫teis:")
    print("- Documenta√ß√£o: README.md")
    print("- Configura√ß√£o GitHub: SETUP_GITHUB.md")
    print("- Exemplo de configura√ß√£o: env_example.txt")

if __name__ == "__main__":
    main()

