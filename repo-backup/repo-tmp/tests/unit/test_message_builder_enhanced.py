#!/usr/bin/env python3
"""
Teste completo do MessageBuilder com funcionalidades avan√ßadas
Valida todas as funcionalidades de emojis, formata√ß√£o e templates
"""

import os
import sys
from decimal import Decimal

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "src"))

from src.core.models import Offer
from src.telegram_bot.message_builder import MessageBuilder


def test_enhanced_message_builder():
    """Testa todas as funcionalidades avan√ßadas do MessageBuilder"""
    print("üß™ Testando MessageBuilder com funcionalidades avan√ßadas...")

    # Criar inst√¢ncia do MessageBuilder
    builder = MessageBuilder()

    # Teste 1: Valida√ß√£o da estrutura b√°sica
    print("\n1Ô∏è‚É£ Testando estrutura b√°sica...")
    assert hasattr(builder, "emojis"), "Emojis n√£o encontrados"
    assert hasattr(builder, "quality_badges"), "Quality badges n√£o encontrados"
    assert hasattr(builder, "category_emojis"), "Category emojis n√£o encontrados"
    assert hasattr(builder, "shipping_emojis"), "Shipping emojis n√£o encontrados"
    assert hasattr(builder, "payment_emojis"), "Payment emojis n√£o encontrados"
    print("‚úÖ Estrutura b√°sica validada")

    # Teste 2: Valida√ß√£o de emojis por categoria
    print("\n2Ô∏è‚É£ Testando emojis por categoria...")
    assert "tech" in builder.emojis, "Categoria tech n√£o encontrada"
    assert "gaming" in builder.emojis, "Categoria gaming n√£o encontrada"
    assert "discount" in builder.emojis, "Categoria discount n√£o encontrada"
    assert "quality" in builder.emojis, "Categoria quality n√£o encontrada"
    assert "urgency" in builder.emojis, "Categoria urgency n√£o encontrada"
    assert "category" in builder.emojis, "Categoria category n√£o encontrada"
    assert "shipping" in builder.emojis, "Categoria shipping n√£o encontrada"
    assert "payment" in builder.emojis, "Categoria payment n√£o encontrada"
    assert "time" in builder.emojis, "Categoria time n√£o encontrada"
    assert "status" in builder.emojis, "Categoria status n√£o encontrada"
    print("‚úÖ Emojis por categoria validados")

    # Teste 3: Valida√ß√£o de badges de qualidade
    print("\n3Ô∏è‚É£ Testando badges de qualidade...")
    assert (
        "best_price_90d" in builder.quality_badges
    ), "Badge best_price_90d n√£o encontrado"
    assert "flash_sale" in builder.quality_badges, "Badge flash_sale n√£o encontrado"
    assert (
        "free_shipping" in builder.quality_badges
    ), "Badge free_shipping n√£o encontrado"
    assert (
        "trusted_store" in builder.quality_badges
    ), "Badge trusted_store n√£o encontrado"
    assert "limited_time" in builder.quality_badges, "Badge limited_time n√£o encontrado"
    print("‚úÖ Badges de qualidade validados")

    # Teste 4: Valida√ß√£o de emojis espec√≠ficos por categoria
    print("\n4Ô∏è‚É£ Testando emojis espec√≠ficos por categoria...")
    assert "smartphone" in builder.category_emojis, "Emoji smartphone n√£o encontrado"
    assert "laptop" in builder.category_emojis, "Emoji laptop n√£o encontrado"
    assert "gaming" in builder.category_emojis, "Emoji gaming n√£o encontrado"
    assert "audio" in builder.category_emojis, "Emoji audio n√£o encontrado"
    print("‚úÖ Emojis espec√≠ficos por categoria validados")

    # Teste 5: Valida√ß√£o de m√©todos auxiliares
    print("\n5Ô∏è‚É£ Testando m√©todos auxiliares...")
    assert hasattr(
        builder, "_get_category_emoji"
    ), "M√©todo _get_category_emoji n√£o encontrado"
    assert hasattr(
        builder, "_get_shipping_emoji"
    ), "M√©todo _get_shipping_emoji n√£o encontrado"
    assert hasattr(
        builder, "_get_payment_emoji"
    ), "M√©todo _get_payment_emoji n√£o encontrado"
    assert hasattr(
        builder, "_format_price_with_emoji"
    ), "M√©todo _format_price_with_emoji n√£o encontrado"
    assert hasattr(
        builder, "_format_discount_with_emoji"
    ), "M√©todo _format_discount_with_emoji n√£o encontrado"
    assert hasattr(
        builder, "_format_time_badge"
    ), "M√©todo _format_time_badge n√£o encontrado"
    assert hasattr(
        builder, "_format_store_trust_badge"
    ), "M√©todo _format_store_trust_badge n√£o encontrado"
    assert hasattr(
        builder, "_format_shipping_info"
    ), "M√©todo _format_shipping_info n√£o encontrado"
    assert hasattr(
        builder, "_format_payment_options"
    ), "M√©todo _format_payment_options n√£o encontrado"
    print("‚úÖ M√©todos auxiliares validados")

    # Teste 6: Valida√ß√£o de formata√ß√£o de pre√ßos
    print("\n6Ô∏è‚É£ Testando formata√ß√£o de pre√ßos...")
    price_emoji = builder._format_price_with_emoji(Decimal("29.99"))
    assert "üí∏" in price_emoji, "Emoji de pre√ßo baixo n√£o encontrado"

    price_emoji = builder._format_price_with_emoji(Decimal("299.99"))
    assert "üíé" in price_emoji, "Emoji de pre√ßo m√©dio n√£o encontrado"

    price_emoji = builder._format_price_with_emoji(Decimal("1299.99"))
    assert "üëë" in price_emoji, "Emoji de pre√ßo alto n√£o encontrado"

    price_emoji = builder._format_price_with_emoji(Decimal("2999.99"))
    assert "üëë" in price_emoji, "Emoji de pre√ßo premium n√£o encontrado"
    print("‚úÖ Formata√ß√£o de pre√ßos validada")

    # Teste 7: Valida√ß√£o de formata√ß√£o de desconto
    print("\n7Ô∏è‚É£ Testando formata√ß√£o de desconto...")
    discount_text = builder._format_discount_with_emoji(55.0)
    assert (
        "üî•" in discount_text and "IMPRESSIONANTE" in discount_text
    ), "Desconto alto n√£o formatado corretamente"

    discount_text = builder._format_discount_with_emoji(35.0)
    assert (
        "‚ö°" in discount_text and "EXCELENTE" in discount_text
    ), "Desconto m√©dio n√£o formatado corretamente"

    discount_text = builder._format_discount_with_emoji(15.0)
    assert (
        "üí∞" in discount_text and "DESCONTO" in discount_text
    ), "Desconto baixo n√£o formatado corretamente"
    print("‚úÖ Formata√ß√£o de desconto validada")

    # Teste 8: Valida√ß√£o de emojis por categoria de produto
    print("\n8Ô∏è‚É£ Testando emojis por categoria de produto...")
    category_emoji = builder._get_category_emoji("smartphone")
    assert category_emoji == "üì±", f"Emoji smartphone incorreto: {category_emoji}"

    category_emoji = builder._get_category_emoji("laptop gaming")
    assert category_emoji == "üíª", f"Emoji laptop incorreto: {category_emoji}"

    category_emoji = builder._get_category_emoji("headphones")
    assert category_emoji == "üéß", f"Emoji headphones incorreto: {category_emoji}"

    category_emoji = builder._get_category_emoji("placa de v√≠deo")
    assert category_emoji == "üé®", f"Emoji placa de v√≠deo incorreto: {category_emoji}"
    print("‚úÖ Emojis por categoria de produto validados")

    # Teste 9: Valida√ß√£o de emojis de frete
    print("\n9Ô∏è‚É£ Testando emojis de frete...")
    shipping_emoji = builder._get_shipping_emoji("gr√°tis")
    assert shipping_emoji == "üöö", f"Emoji frete gr√°tis incorreto: {shipping_emoji}"

    shipping_emoji = builder._get_shipping_emoji("r√°pido")
    assert shipping_emoji == "‚ö°", f"Emoji frete r√°pido incorreto: {shipping_emoji}"

    shipping_emoji = builder._get_shipping_emoji("mesmo dia")
    assert (
        shipping_emoji == "üöÄ"
    ), f"Emoji entrega mesmo dia incorreto: {shipping_emoji}"
    print("‚úÖ Emojis de frete validados")

    # Teste 10: Valida√ß√£o de emojis de pagamento
    print("\nüîü Testando emojis de pagamento...")
    payment_emoji = builder._get_payment_emoji("pix")
    assert payment_emoji == "üì±", f"Emoji PIX incorreto: {payment_emoji}"

    payment_emoji = builder._get_payment_emoji("cart√£o")
    assert payment_emoji == "üí≥", f"Emoji cart√£o incorreto: {payment_emoji}"

    payment_emoji = builder._get_payment_emoji("boleto")
    assert payment_emoji == "üìÑ", f"Emoji boleto incorreto: {payment_emoji}"
    print("‚úÖ Emojis de pagamento validados")

    # Teste 11: Valida√ß√£o de template aprimorado
    print("\n1Ô∏è‚É£1Ô∏è‚É£ Testando template aprimorado...")

    # Criar oferta de teste simples
    test_offer = Offer(
        title="Test Product",
        price=Decimal("100"),
        url="https://example.com/test",
        store="Test Store",
        original_price=Decimal("200"),
        coupon_code="TEST123",
        coupon_discount=15.0,
        coupon_valid_until="2024-12-31",
    )

    # Gerar mensagem com template aprimorado
    message = builder._apply_enhanced_template(test_offer, "TEST")

    # Validar elementos essenciais da mensagem
    assert "OFERTA TEST" in message, "T√≠tulo da oferta n√£o encontrado"
    assert "CUPOM:" in message, "Informa√ß√µes de cupom n√£o encontradas"
    assert "TEST123" in message, "C√≥digo do cupom n√£o encontrado"

    print("‚úÖ Template aprimorado validado")

    # Teste 12: Valida√ß√£o de mensagens espec√≠ficas por plataforma
    print("\n1Ô∏è‚É£2Ô∏è‚É£ Testando mensagens espec√≠ficas por plataforma...")

    # Teste Awin
    awin_message = builder._build_awin_template(test_offer)
    assert "OFERTA ESPECIAL" in awin_message, "Template Awin n√£o formatado corretamente"

    # Teste Amazon
    amazon_message = builder._build_amazon_template(test_offer)
    assert (
        "OFERTA AMAZON" in amazon_message
    ), "Template Amazon n√£o formatado corretamente"

    # Teste Mercado Livre
    ml_message = builder._build_mercadolivre_template(test_offer)
    assert (
        "OFERTA MERCADO LIVRE" in ml_message
    ), "Template Mercado Livre n√£o formatado corretamente"

    # Teste Shopee
    shopee_message = builder._build_shopee_template(test_offer)
    assert (
        "OFERTA SHOPEE" in shopee_message
    ), "Template Shopee n√£o formatado corretamente"

    # Teste Magazine Luiza
    magalu_message = builder._build_magazineluiza_template(test_offer)
    assert (
        "OFERTA MAGAZINE LUIZA" in magalu_message
    ), "Template Magazine Luiza n√£o formatado corretamente"

    # Teste AliExpress
    aliexpress_message = builder._build_aliexpress_template(test_offer)
    assert (
        "OFERTA ALIEXPRESS" in aliexpress_message
    ), "Template AliExpress n√£o formatado corretamente"

    # Teste Default
    default_message = builder._build_default_template(test_offer)
    assert (
        "OFERTA ESPECIAL" in default_message
    ), "Template Default n√£o formatado corretamente"

    print("‚úÖ Mensagens espec√≠ficas por plataforma validadas")

    # Teste 13: Valida√ß√£o de mensagens especiais
    print("\n1Ô∏è‚É£3Ô∏è‚É£ Testando mensagens especiais...")

    # Teste mensagem de boas-vindas
    welcome_message = builder.build_welcome_message()
    assert (
        "Bem-vindo ao Garimpeiro Geek!" in welcome_message
    ), "Mensagem de boas-vindas n√£o formatada corretamente"

    # Teste mensagem de ajuda
    help_message = builder.build_help_message({"/start": "Iniciar", "/help": "Ajuda"})
    assert (
        "Comandos do Garimpeiro Geek:" in help_message
    ), "Mensagem de ajuda n√£o formatada corretamente"

    # Teste mensagem de status
    status_message = builder.build_status_message()
    assert (
        "Status do Sistema" in status_message
    ), "Mensagem de status n√£o formatada corretamente"

    # Teste mensagem de estat√≠sticas
    stats_message = builder.build_stats_message()
    assert (
        "Estat√≠sticas do Sistema" in stats_message
    ), "Mensagem de estat√≠sticas n√£o formatada corretamente"

    print("‚úÖ Mensagens especiais validadas")

    print("\nüéâ TODOS OS TESTES PASSARAM COM SUCESSO!")
    print(
        "‚úÖ MessageBuilder com funcionalidades avan√ßadas est√° funcionando perfeitamente!"
    )

    return True


if __name__ == "__main__":
    try:
        test_enhanced_message_builder()
        print("\nüöÄ MessageBuilder est√° pronto para produ√ß√£o!")
    except Exception as e:
        print(f"\n‚ùå Erro durante os testes: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
