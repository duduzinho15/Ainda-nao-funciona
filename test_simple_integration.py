#!/usr/bin/env python3
"""
Script de Teste Simples de Integra√ß√£o
Verifica se todos os m√≥dulos podem ser importados e inicializados
"""

import sys
import logging
from datetime import datetime

# Configura logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_module_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    logger.info("üß™ Testando Importa√ß√µes de M√≥dulos...")
    
    test_results = {}
    
    # Testa importa√ß√£o do cache
    try:
        import cache_system
        logger.info("‚úÖ cache_system importado com sucesso")
        test_results['cache_system'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar cache_system: {e}")
        test_results['cache_system'] = False
    
    # Testa importa√ß√£o do rate limiter
    try:
        import rate_limiter
        logger.info("‚úÖ rate_limiter importado com sucesso")
        test_results['rate_limiter'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar rate_limiter: {e}")
        test_results['rate_limiter'] = False
    
    # Testa importa√ß√£o do health monitor
    try:
        import health_monitor
        logger.info("‚úÖ health_monitor importado com sucesso")
        test_results['health_monitor'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar health_monitor: {e}")
        test_results['health_monitor'] = False
    
    # Testa importa√ß√£o das m√©tricas de performance
    try:
        import performance_metrics
        logger.info("‚úÖ performance_metrics importado com sucesso")
        test_results['performance_metrics'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar performance_metrics: {e}")
        test_results['performance_metrics'] = False
    
    # Testa importa√ß√£o das categorias de usu√°rios
    try:
        import user_categories
        logger.info("‚úÖ user_categories importado com sucesso")
        test_results['user_categories'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar user_categories: {e}")
        test_results['user_categories'] = False
    
    # Testa importa√ß√£o do hist√≥rico de pre√ßos
    try:
        import price_history
        logger.info("‚úÖ price_history importado com sucesso")
        test_results['price_history'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar price_history: {e}")
        test_results['price_history'] = False
    
    # Testa importa√ß√£o do comparador de pre√ßos
    try:
        import price_comparator
        logger.info("‚úÖ price_comparator importado com sucesso")
        test_results['price_comparator'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar price_comparator: {e}")
        test_results['price_comparator'] = False
    
    # Testa importa√ß√£o das reviews de produtos
    try:
        import product_reviews
        logger.info("‚úÖ product_reviews importado com sucesso")
        test_results['product_reviews'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar product_reviews: {e}")
        test_results['product_reviews'] = False
    
    # Testa importa√ß√£o do sistema de notifica√ß√µes
    try:
        import notification_system
        logger.info("‚úÖ notification_system importado com sucesso")
        test_results['notification_system'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar notification_system: {e}")
        test_results['notification_system'] = False
    
    # Testa importa√ß√£o do main
    try:
        import main
        logger.info("‚úÖ main.py importado com sucesso")
        test_results['main'] = True
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar main.py: {e}")
        test_results['main'] = False
    
    return test_results

def test_basic_functionality():
    """Testa funcionalidades b√°sicas dos m√≥dulos"""
    logger.info("üß™ Testando Funcionalidades B√°sicas...")
    
    test_results = {}
    
    # Testa cache b√°sico
    try:
        import cache_system
        cache_system.cache.set("test_key", "test_value", 10)
        result = cache_system.cache.get("test_key")
        if result == "test_value":
            logger.info("‚úÖ Cache b√°sico funcionando")
            test_results['cache_basic'] = True
        else:
            logger.error("‚ùå Cache b√°sico falhou")
            test_results['cache_basic'] = False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste do cache: {e}")
        test_results['cache_basic'] = False
    
    # Testa rate limiter b√°sico
    try:
        import rate_limiter
        limiter = rate_limiter.IntelligentRateLimiter()
        if len(limiter.strategies) > 0:
            logger.info("‚úÖ Rate limiter b√°sico funcionando")
            test_results['rate_limiter_basic'] = True
        else:
            logger.error("‚ùå Rate limiter b√°sico falhou")
            test_results['rate_limiter_basic'] = False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste do rate limiter: {e}")
        test_results['rate_limiter_basic'] = False
    
    # Testa health monitor b√°sico
    try:
        import health_monitor
        monitor = health_monitor.HealthMonitor()
        if hasattr(monitor, 'checkers'):
            logger.info("‚úÖ Health monitor b√°sico funcionando")
            test_results['health_monitor_basic'] = True
        else:
            logger.error("‚ùå Health monitor b√°sico falhou")
            test_results['health_monitor_basic'] = False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste do health monitor: {e}")
        test_results['health_monitor_basic'] = False
    
    # Testa m√©tricas b√°sicas
    try:
        import performance_metrics
        dashboard = performance_metrics.get_metrics_dashboard()
        if isinstance(dashboard, dict):
            logger.info("‚úÖ M√©tricas b√°sicas funcionando")
            test_results['metrics_basic'] = True
        else:
            logger.error("‚ùå M√©tricas b√°sicas falharam")
            test_results['metrics_basic'] = False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste das m√©tricas: {e}")
        test_results['metrics_basic'] = False
    
    # Testa categorias b√°sicas
    try:
        import user_categories
        if hasattr(user_categories, 'category_manager'):
            logger.info("‚úÖ Categorias b√°sicas funcionando")
            test_results['categories_basic'] = True
        else:
            logger.error("‚ùå Categorias b√°sicas falharam")
            test_results['categories_basic'] = False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste das categorias: {e}")
        test_results['categories_basic'] = False
    
    # Testa hist√≥rico de pre√ßos b√°sico
    try:
        import price_history
        if hasattr(price_history, 'price_history_manager'):
            logger.info("‚úÖ Hist√≥rico de pre√ßos b√°sico funcionando")
            test_results['price_history_basic'] = True
        else:
            logger.error("‚ùå Hist√≥rico de pre√ßos b√°sico falhou")
            test_results['price_history_basic'] = False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste do hist√≥rico de pre√ßos: {e}")
        test_results['price_history_basic'] = False
    
    # Testa comparador de pre√ßos b√°sico
    try:
        import price_comparator
        if hasattr(price_comparator, 'price_comparator'):
            logger.info("‚úÖ Comparador de pre√ßos b√°sico funcionando")
            test_results['price_comparator_basic'] = True
        else:
            logger.error("‚ùå Comparador de pre√ßos b√°sico falhou")
            test_results['price_comparator_basic'] = False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste do comparador de pre√ßos: {e}")
        test_results['price_comparator_basic'] = False
    
    # Testa reviews b√°sico
    try:
        import product_reviews
        if hasattr(product_reviews, 'review_manager'):
            logger.info("‚úÖ Reviews b√°sico funcionando")
            test_results['reviews_basic'] = True
        else:
            logger.error("‚ùå Reviews b√°sico falhou")
            test_results['reviews_basic'] = False
    except Exception as e:
        logger.error(f"‚ùå Erro no teste das reviews: {e}")
        test_results['reviews_basic'] = False
    
    return test_results

def generate_report(import_results, functionality_results):
    """Gera relat√≥rio dos testes"""
    logger.info("\n" + "="*60)
    logger.info("üìä RELAT√ìRIO DOS TESTES DE INTEGRA√á√ÉO")
    logger.info("="*60)
    
    # Estat√≠sticas de importa√ß√£o
    total_imports = len(import_results)
    successful_imports = sum(1 for result in import_results.values() if result)
    failed_imports = total_imports - successful_imports
    
    logger.info(f"üì¶ IMPORTA√á√ïES:")
    logger.info(f"   Total: {total_imports}")
    logger.info(f"   ‚úÖ Sucessos: {successful_imports}")
    logger.info(f"   ‚ùå Falhas: {failed_imports}")
    logger.info(f"   üìà Taxa de sucesso: {(successful_imports/total_imports)*100:.1f}%")
    
    # Estat√≠sticas de funcionalidade
    total_functionality = len(functionality_results)
    successful_functionality = sum(1 for result in functionality_results.values() if result)
    failed_functionality = total_functionality - successful_functionality
    
    logger.info(f"\nüîß FUNCIONALIDADES:")
    logger.info(f"   Total: {total_functionality}")
    logger.info(f"   ‚úÖ Sucessos: {successful_functionality}")
    logger.info(f"   ‚ùå Falhas: {failed_functionality}")
    logger.info(f"   üìà Taxa de sucesso: {(successful_functionality/total_functionality)*100:.1f}%")
    
    # Status geral
    total_tests = total_imports + total_functionality
    total_successes = successful_imports + successful_functionality
    overall_success_rate = (total_successes / total_tests) * 100
    
    logger.info(f"\nüéØ STATUS GERAL:")
    logger.info(f"   Total de testes: {total_tests}")
    logger.info(f"   Total de sucessos: {total_successes}")
    logger.info(f"   Taxa de sucesso geral: {overall_success_rate:.1f}%")
    
    if overall_success_rate >= 90:
        logger.info("üéâ EXCELENTE! Sistema pronto para produ√ß√£o.")
    elif overall_success_rate >= 80:
        logger.info("‚úÖ BOM! Sistema funcional com pequenos ajustes necess√°rios.")
    elif overall_success_rate >= 60:
        logger.info("‚ö†Ô∏è  REGULAR! Sistema funcional mas precisa de corre√ß√µes.")
    else:
        logger.error("‚ùå PROBLEM√ÅTICO! Sistema precisa de corre√ß√µes significativas.")
    
    logger.info("="*60)

def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Iniciando Testes de Integra√ß√£o Simples...")
    
    # Testa importa√ß√µes
    import_results = test_module_imports()
    
    # Testa funcionalidades b√°sicas
    functionality_results = test_basic_functionality()
    
    # Gera relat√≥rio
    generate_report(import_results, functionality_results)

if __name__ == "__main__":
    main()
