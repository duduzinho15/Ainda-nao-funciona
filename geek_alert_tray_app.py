#!/usr/bin/env python3
"""
Aplicativo Windows com Tray Icon para Sistema Inteligente de Alertas Geek
Roda em background com √≠cone na bandeja do sistema
"""

import sys
import os
import threading
import time
import asyncio
import logging
from datetime import datetime
import tkinter as tk
from tkinter import messagebox, ttk
import pystray
from PIL import Image, ImageDraw
import queue

# Adiciona o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importa o sistema inteligente
from intelligent_geek_alert_system import IntelligentGeekAlertSystem

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('geek_alert_tray.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class GeekAlertTrayApp:
    """Aplicativo Windows com Tray Icon para Sistema Inteligente de Alertas"""
    
    def __init__(self):
        self.running = False
        self.alert_system = None
        self.alert_thread = None
        self.icon = None
        self.log_queue = queue.Queue()
        self.stats = {
            "total_alerts": 0,
            "total_products": 0,
            "search_cycles": 0,
            "last_alert": None,
            "status": "Parado"
        }
        
        # Cria √≠cone da bandeja
        self.create_tray_icon()
        
    def create_tray_icon(self):
        """Cria √≠cone para a bandeja do sistema"""
        try:
            # Cria √≠cone simples (c√≠rculo verde)
            image = Image.new('RGB', (64, 64), color='white')
            draw = ImageDraw.Draw(image)
            draw.ellipse([8, 8, 56, 56], fill='green', outline='darkgreen', width=2)
            
            # Menu da bandeja
            menu = pystray.Menu(
                pystray.MenuItem("üöÄ Iniciar Sistema", self.start_system),
                pystray.MenuItem("‚èπÔ∏è Parar Sistema", self.stop_system),
                pystray.MenuItem("üìä Estat√≠sticas", self.show_stats),
                pystray.MenuItem("üìù Ver Logs", self.show_logs),
                pystray.MenuItem("‚öôÔ∏è Configura√ß√µes", self.show_config),
                pystray.MenuItem("‚ùå Sair", self.quit_app)
            )
            
            # Cria o √≠cone da bandeja
            self.icon = pystray.Icon(
                "geek_alert",
                image,
                "Sistema Inteligente de Alertas Geek",
                menu
            )
            
            logger.info("‚úÖ √çcone da bandeja criado com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar √≠cone da bandeja: {e}")
    
    def start_system(self, icon=None, item=None):
        """Inicia o sistema de alertas"""
        try:
            if self.running:
                messagebox.showinfo("Sistema", "Sistema j√° est√° rodando!")
                return
            
            logger.info("üöÄ Iniciando Sistema Inteligente de Alertas...")
            self.stats["status"] = "Rodando"
            
            # Inicia o sistema em thread separada
            self.alert_thread = threading.Thread(target=self.run_alert_system)
            self.alert_thread.daemon = True
            self.alert_thread.start()
            
            self.running = True
            
            # Atualiza √≠cone para verde
            self.update_icon_color('green')
            
            # Mostra notifica√ß√£o
            self.icon.notify("Sistema Iniciado", "Sistema de Alertas Geek est√° rodando!")
            
            logger.info("‚úÖ Sistema iniciado com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar sistema: {e}")
            messagebox.showerror("Erro", f"Erro ao iniciar sistema: {e}")
    
    def stop_system(self, icon=None, item=None):
        """Para o sistema de alertas"""
        try:
            if not self.running:
                messagebox.showinfo("Sistema", "Sistema n√£o est√° rodando!")
                return
            
            logger.info("‚èπÔ∏è Parando Sistema Inteligente de Alertas...")
            self.stats["status"] = "Parado"
            
            # Para o sistema
            if self.alert_system:
                self.alert_system.stop()
            
            self.running = False
            
            # Atualiza √≠cone para vermelho
            self.update_icon_color('red')
            
            # Mostra notifica√ß√£o
            self.icon.notify("Sistema Parado", "Sistema de Alertas Geek foi parado!")
            
            logger.info("‚úÖ Sistema parado com sucesso")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao parar sistema: {e}")
            messagebox.showerror("Erro", f"Erro ao parar sistema: {e}")
    
    def run_alert_system(self):
        """Executa o sistema de alertas em thread separada"""
        try:
            logger.info("üéØ Executando Sistema Inteligente de Alertas...")
            
            # Cria e executa o sistema
            self.alert_system = IntelligentGeekAlertSystem()
            
            # Executa o sistema de forma s√≠ncrona
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                loop.run_until_complete(self.alert_system.run_continuous_search())
            finally:
                loop.close()
                
        except Exception as e:
            logger.error(f"‚ùå Erro no sistema de alertas: {e}")
            self.running = False
            self.stats["status"] = "Erro"
            self.update_icon_color('red')
    
    def update_icon_color(self, color):
        """Atualiza cor do √≠cone da bandeja"""
        try:
            if self.icon:
                # Cria novo √≠cone com a cor especificada
                image = Image.new('RGB', (64, 64), color='white')
                draw = ImageDraw.Draw(image)
                draw.ellipse([8, 8, 56, 56], fill=color, outline='darkgreen' if color == 'green' else 'darkred', width=2)
                
                self.icon.icon = image
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar √≠cone: {e}")
    
    def show_stats(self, icon=None, item=None):
        """Mostra estat√≠sticas do sistema"""
        try:
            # Cria janela de estat√≠sticas
            stats_window = tk.Toplevel()
            stats_window.title("üìä Estat√≠sticas do Sistema Geek")
            stats_window.geometry("400x300")
            stats_window.resizable(False, False)
            
            # Centraliza a janela
            stats_window.transient()
            stats_window.grab_set()
            
            # T√≠tulo
            title_label = tk.Label(stats_window, text="üìä ESTAT√çSTICAS DO SISTEMA", 
                                 font=("Arial", 16, "bold"))
            title_label.pack(pady=20)
            
            # Frame para estat√≠sticas
            stats_frame = ttk.Frame(stats_window)
            stats_frame.pack(pady=20, padx=20, fill="both", expand=True)
            
            # Estat√≠sticas
            stats_data = [
                ("üöÄ Status", self.stats["status"]),
                ("üì¢ Total de Alertas", str(self.stats["total_alerts"])),
                ("üîç Produtos Analisados", str(self.stats["total_products"])),
                ("üîÑ Ciclos de Busca", str(self.stats["search_cycles"])),
                ("‚è∞ √öltimo Alerta", str(self.stats["last_alert"]) if self.stats["last_alert"] else "Nenhum")
            ]
            
            for i, (label, value) in enumerate(stats_data):
                row = i // 2
                col = i % 2
                
                label_widget = tk.Label(stats_frame, text=label, font=("Arial", 10, "bold"))
                label_widget.grid(row=row, column=col*2, sticky="w", padx=10, pady=5)
                
                value_widget = tk.Label(stats_frame, text=value, font=("Arial", 10))
                value_widget.grid(row=row, column=col*2+1, sticky="w", padx=10, pady=5)
            
            # Bot√£o fechar
            close_btn = tk.Button(stats_window, text="‚ùå Fechar", 
                                command=stats_window.destroy, font=("Arial", 12))
            close_btn.pack(pady=20)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao mostrar estat√≠sticas: {e}")
            messagebox.showerror("Erro", f"Erro ao mostrar estat√≠sticas: {e}")
    
    def show_logs(self, icon=None, item=None):
        """Mostra logs do sistema"""
        try:
            # Cria janela de logs
            logs_window = tk.Toplevel()
            logs_window.title("üìù Logs do Sistema Geek")
            logs_window.geometry("600x400")
            
            # Centraliza a janela
            logs_window.transient()
            logs_window.grab_set()
            
            # T√≠tulo
            title_label = tk.Label(logs_window, text="üìù LOGS DO SISTEMA", 
                                 font=("Arial", 16, "bold"))
            title_label.pack(pady=20)
            
            # Frame para logs
            logs_frame = ttk.Frame(logs_window)
            logs_frame.pack(pady=20, padx=20, fill="both", expand=True)
            
            # √Årea de texto para logs
            logs_text = tk.Text(logs_frame, wrap=tk.WORD, font=("Consolas", 9))
            logs_text.pack(side=tk.LEFT, fill="both", expand=True)
            
            # Scrollbar
            scrollbar = ttk.Scrollbar(logs_frame, orient=tk.VERTICAL, command=logs_text.yview)
            scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
            logs_text.config(yscrollcommand=scrollbar.set)
            
            # Carrega logs do arquivo
            try:
                with open('geek_alert_tray.log', 'r', encoding='utf-8') as f:
                    logs = f.read()
                    logs_text.insert(tk.END, logs)
                    logs_text.see(tk.END)
            except FileNotFoundError:
                logs_text.insert(tk.END, "Nenhum log encontrado ainda.")
            
            # Bot√£o atualizar
            refresh_btn = tk.Button(logs_window, text="üîÑ Atualizar", 
                                  command=lambda: self.refresh_logs(logs_text), font=("Arial", 12))
            refresh_btn.pack(pady=10)
            
            # Bot√£o fechar
            close_btn = tk.Button(logs_window, text="‚ùå Fechar", 
                                command=logs_window.destroy, font=("Arial", 12))
            close_btn.pack(pady=10)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao mostrar logs: {e}")
            messagebox.showerror("Erro", f"Erro ao mostrar logs: {e}")
    
    def refresh_logs(self, logs_text):
        """Atualiza logs na janela"""
        try:
            logs_text.delete(1.0, tk.END)
            with open('geek_alert_tray.log', 'r', encoding='utf-8') as f:
                logs = f.read()
                logs_text.insert(tk.END, logs)
                logs_text.see(tk.END)
        except FileNotFoundError:
            logs_text.insert(tk.END, "Nenhum log encontrado ainda.")
    
    def show_config(self, icon=None, item=None):
        """Mostra configura√ß√µes do sistema"""
        try:
            # Cria janela de configura√ß√µes
            config_window = tk.Toplevel()
            config_window.title("‚öôÔ∏è Configura√ß√µes do Sistema Geek")
            config_window.geometry("500x400")
            config_window.resizable(False, False)
            
            # Centraliza a janela
            config_window.transient()
            config_window.grab_set()
            
            # T√≠tulo
            title_label = tk.Label(config_window, text="‚öôÔ∏è CONFIGURA√á√ïES DO SISTEMA", 
                                 font=("Arial", 16, "bold"))
            title_label.pack(pady=20)
            
            # Frame para configura√ß√µes
            config_frame = ttk.Frame(config_window)
            config_frame.pack(pady=20, padx=20, fill="both", expand=True)
            
            # Configura√ß√µes
            config_data = [
                ("üîç Intervalo de Busca (minutos)", "5"),
                ("üí∞ Desconto M√≠nimo (%)", "15"),
                ("üí∏ Comiss√£o M√≠nima (%)", "10"),
                ("üì± Chat ID do Telegram", "Seu Chat ID"),
                ("ü§ñ Token do Bot", "Seu Bot Token")
            ]
            
            config_vars = []
            for i, (label, default_value) in enumerate(config_data):
                row = i
                
                label_widget = tk.Label(config_frame, text=label, font=("Arial", 10, "bold"))
                label_widget.grid(row=row, column=0, sticky="w", padx=10, pady=5)
                
                var = tk.StringVar(value=default_value)
                config_vars.append(var)
                
                entry_widget = tk.Entry(config_frame, textvariable=var, font=("Arial", 10), width=30)
                entry_widget.grid(row=row, column=1, sticky="ew", padx=10, pady=5)
            
            # Configura grid
            config_frame.columnconfigure(1, weight=1)
            
            # Bot√µes
            button_frame = tk.Frame(config_window)
            button_frame.pack(pady=20)
            
            save_btn = tk.Button(button_frame, text="üíæ Salvar", 
                               command=lambda: self.save_config(config_vars), font=("Arial", 12))
            save_btn.pack(side=tk.LEFT, padx=10)
            
            close_btn = tk.Button(button_frame, text="‚ùå Fechar", 
                                command=config_window.destroy, font=("Arial", 12))
            close_btn.pack(side=tk.LEFT, padx=10)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao mostrar configura√ß√µes: {e}")
            messagebox.showerror("Erro", f"Erro ao mostrar configura√ß√µes: {e}")
    
    def save_config(self, config_vars):
        """Salva configura√ß√µes"""
        try:
            # Aqui voc√™ implementaria a l√≥gica para salvar as configura√ß√µes
            messagebox.showinfo("Configura√ß√µes", "Configura√ß√µes salvas com sucesso!")
            logger.info("‚úÖ Configura√ß√µes salvas")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar configura√ß√µes: {e}")
            messagebox.showerror("Erro", f"Erro ao salvar configura√ß√µes: {e}")
    
    def quit_app(self, icon=None, item=None):
        """Sai do aplicativo"""
        try:
            logger.info("üõë Saindo do aplicativo...")
            
            # Para o sistema se estiver rodando
            if self.running:
                self.stop_system()
            
            # Remove √≠cone da bandeja
            if self.icon:
                self.icon.stop()
            
            # Sai do aplicativo
            sys.exit(0)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao sair: {e}")
            sys.exit(1)
    
    def run(self):
        """Executa o aplicativo"""
        try:
            logger.info("üöÄ Iniciando Aplicativo Geek Alert...")
            
            # Inicia o √≠cone da bandeja
            if self.icon:
                self.icon.run()
            else:
                logger.error("‚ùå √çcone da bandeja n√£o foi criado")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao executar aplicativo: {e}")

def main():
    """Fun√ß√£o principal"""
    try:
        # Cria e executa o aplicativo
        app = GeekAlertTrayApp()
        app.run()
        
    except Exception as e:
        logger.error(f"‚ùå Erro no aplicativo: {e}")
        messagebox.showerror("Erro Fatal", f"Erro no aplicativo: {e}")

if __name__ == "__main__":
    main()
