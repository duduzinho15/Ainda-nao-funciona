import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# Carrega as variáveis de ambiente do arquivo .env
load_dotenv()

# Configuração básica de logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(f"logs/bot_{datetime.now().strftime('%Y%m%d')}.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)

# Comandos do bot
BOT_COMMANDS = [
    ("start", "Inicia o bot e exibe as opções disponíveis"),
    ("buscar", "Força uma busca por ofertas (apenas administrador)"),
    ("oferta", "Envia uma oferta manualmente (apenas administrador)"),
]


# Manipulador do comando /start
async def comando_iniciar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envia uma mensagem quando o comando /start é acionado."""
    await update.message.reply_text(
        "Olá! Eu sou o Garimpeiro Geek.\n"
        "\n"
        "Comandos disponíveis:\n"
        "/start - Mostra esta mensagem de ajuda\n"
        "/buscar - Força uma busca por ofertas (apenas administrador)\n"
        "/oferta - Envia uma oferta manualmente (apenas administrador)"
    )


# Manipulador do comando /buscar
async def comando_buscar(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Força uma busca por ofertas."""
    await update.message.reply_text("Buscando ofertas...")
    # Aqui você pode adicionar a lógica de busca de ofertas
    await update.message.reply_text("Busca concluída!")


# Manipulador de mensagens de texto
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Responde a mensagens de texto."""
    await update.message.reply_text(
        "Desculpe, não entendi o comando. Use /start para ver as opções disponíveis."
    )


# Configura os comandos do bot no Telegram
async def setup_bot_commands(application) -> None:
    """Configura os comandos do bot no Telegram."""
    await application.bot.set_my_commands(BOT_COMMANDS)
    logger.info("Comandos do bot configurados com sucesso")


def main() -> None:
    """Inicia o bot."""
    # Cria o diretório de logs se não existir
    if not os.path.exists("logs"):
        os.makedirs("logs")

    logger.info("Iniciando o Garimpeiro Geek...")

    # Obtém o token do bot
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error(
            "Token do bot não encontrado. Verifique a variável de ambiente TELEGRAM_BOT_TOKEN."
        )
        return

    # Cria a aplicação
    application = Application.builder().token(token).build()

    # Adiciona os manipuladores de comandos
    application.add_handler(CommandHandler("start", comando_iniciar))
    application.add_handler(CommandHandler("buscar", comando_buscar))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    # Configura os comandos do bot
    application.add_handler(CommandHandler("start", comando_iniciar))

    # Inicia o bot
    logger.info("Iniciando o bot...")
    application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
