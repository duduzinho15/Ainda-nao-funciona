#!/usr/bin/env python3
"""
M√≥dulo para busca de ofertas no site Pelando usando Selenium.

Este m√≥dulo implementa um scraper para buscar ofertas de produtos de tecnologia
no site Pelando, lidando com conte√∫do carregado dinamicamente via JavaScript.
"""

import asyncio
import logging
import re
import time
from datetime import datetime
from typing import List, Dict, Optional, Any, Tuple
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def extrair_preco(texto: str) -> Tuple[Optional[str], Optional[str]]:
    """
    Extrai pre√ßo atual e original de um texto de pre√ßo do Pelando.

    Args:
        texto: Texto contendo os pre√ßos (ex: "R$ 1.199,99 R$ 999,99")

    Returns:
        tuple: (preco_atual, preco_original) ou (preco_atual, None) se n√£o houver desconto
    """
    # Encontra todos os valores num√©ricos no formato R$ X.XXX,XX
    precos = re.findall(r"R\$\s*[\d\.]+,\d{2}", texto)

    if not precos:
        return None, None

    # Remove o s√≠mbolo R$ e espa√ßos para padroniza√ß√£o
    precos = [p.replace("R$", "").strip() for p in precos]

    # Se tiver apenas um pre√ßo, retorna ele como pre√ßo atual
    if len(precos) == 1:
        return precos[0], None

    # Se tiver mais de um, assume que o primeiro √© o pre√ßo original e o segundo o com desconto
    return precos[1], precos[0]


async def buscar_ofertas_pelando_selenium(
    max_paginas: int = 3, min_desconto: int = 10
) -> List[Dict[str, Any]]:
    """
    Busca ofertas no Pelando usando Selenium para lidar com conte√∫do din√¢mico.

    Args:
        max_paginas: N√∫mero m√°ximo de p√°ginas para buscar
        min_desconto: Percentual m√≠nimo de desconto para considerar a oferta

    Returns:
        Lista de dicion√°rios contendo as ofertas encontradas
    """
    ofertas = []
    driver = None

    try:
        # Configura op√ß√µes do Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Executa em background
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument(
            "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        )

        # Inicializa o driver
        driver = webdriver.Chrome(options=chrome_options)
        driver.implicitly_wait(10)

        # URLs das p√°ginas principais do Pelando
        urls = [
            "https://www.pelando.com.br/",
            "https://www.pelando.com.br/hot",
            "https://www.pelando.com.br/ofertas",
        ]

        for url in urls[:max_paginas]:
            logger.info(f"üîç Buscando ofertas em: {url}")

            try:
                # Acessa a p√°gina
                driver.get(url)

                # Aguarda o carregamento da p√°gina
                time.sleep(5)

                # Faz scroll para carregar mais conte√∫do
                for i in range(3):
                    driver.execute_script(
                        "window.scrollTo(0, document.body.scrollHeight);"
                    )
                    time.sleep(2)

                # Aguarda mais um pouco para garantir que tudo carregou
                time.sleep(3)

                # Obt√©m o HTML da p√°gina
                html = driver.page_source
                soup = BeautifulSoup(html, "html.parser")

                # Encontra todos os cards de oferta
                cards = soup.select(
                    '[class*="default-deal-card"], [class*="deal-card"], [class*="card"], [class*="thread"]'
                )

                if not cards:
                    logger.warning(f"Nenhum card de oferta encontrado em {url}")
                    continue

                logger.info(f"Encontrados {len(cards)} cards em {url}")

                for card in cards:
                    try:
                        # Extrai t√≠tulo e URL do produto
                        titulo_elem = card.select_one(
                            '[class*="deal-card-title"] a, [class*="default-deal-card-title"] a, a[href*="/thread/"], h1 a, h2 a, h3 a'
                        )
                        if not titulo_elem:
                            continue

                        titulo = titulo_elem.get_text(strip=True)
                        if not titulo or len(titulo) < 10:
                            continue

                        url_oferta = titulo_elem.get("href", "")

                        # Garante que a URL completa est√° sendo usada
                        if url_oferta and not url_oferta.startswith("http"):
                            url_oferta = f"https://www.pelando.com.br{url_oferta}"

                        # Extrai pre√ßos
                        preco_elem = card.select_one(
                            '[class*="price"], [class*="deal-price"], .price, .deal-price, [class*="thread-price"]'
                        )
                        if not preco_elem:
                            # Tenta extrair pre√ßo do texto do card
                            card_text = card.get_text()
                            preco_match = re.search(r"R\$\s*[\d\.]+,\d{2}", card_text)
                            if preco_match:
                                preco_atual, preco_original = extrair_preco(
                                    preco_match.group()
                                )
                            else:
                                continue
                        else:
                            preco_atual, preco_original = extrair_preco(
                                preco_elem.get_text(strip=True)
                            )

                        # Se n√£o conseguiu extrair pre√ßo, pula para a pr√≥xima oferta
                        if not preco_atual:
                            continue

                        # Extrai URL da imagem
                        img_elem = card.select_one("img")
                        imagem_url = ""
                        if img_elem:
                            imagem_url = img_elem.get("src", "")
                            if imagem_url.startswith("//"):
                                imagem_url = f"https:{imagem_url}"

                        # Extrai porcentagem de desconto
                        card_text = card.get_text()
                        desconto = 0
                        desconto_match = re.search(
                            r"(\d+)%?\s*off|(\d+)%?\s*desconto|(\d+)%?\s*menos",
                            card_text,
                            re.IGNORECASE,
                        )
                        if desconto_match:
                            for group in desconto_match.groups():
                                if group:
                                    desconto = int(group)
                                    break

                        # Filtra por desconto m√≠nimo (mais flex√≠vel para o Pelando)
                        if desconto < min_desconto and desconto > 0:
                            # Se n√£o tem desconto espec√≠fico, aceita a oferta mesmo assim
                            pass

                        # Extrai nome da loja
                        loja_elem = card.select_one(
                            '[class*="deal-card-store"] a, [class*="default-deal-card-store"] a, [class*="store"]'
                        )
                        loja = (
                            loja_elem.get_text(strip=True)
                            if loja_elem
                            else "Desconhecida"
                        )

                        # Extrai URL do produto na loja (procura por links externos)
                        url_produto = ""
                        external_links = card.select('a[href*="http"]')
                        for link in external_links:
                            href = link.get("href", "")
                            if any(
                                domain in href
                                for domain in [
                                    "amazon",
                                    "shopee",
                                    "mercadolivre",
                                    "magazineluiza",
                                    "aliexpress",
                                ]
                            ):
                                url_produto = href
                                break

                        # Se n√£o tem URL do produto, usa a URL da oferta no Pelando
                        if not url_produto and url_oferta:
                            url_produto = url_oferta

                        # Adiciona a oferta √† lista
                        oferta = {
                            "titulo": titulo,
                            "url_produto": url_produto,
                            "url_fonte": url_oferta,
                            "preco": preco_atual,
                            "preco_original": preco_original,
                            "loja": loja,
                            "fonte": "Pelando",
                            "imagem_url": imagem_url,
                            "desconto": desconto,
                            "data_coleta": datetime.now().isoformat(),
                        }

                        # Verifica se a oferta j√° foi adicionada (evita duplicatas)
                        if not any(
                            o["url_produto"] == oferta["url_produto"] for o in ofertas
                        ):
                            ofertas.append(oferta)
                            logger.debug(f"Oferta adicionada: {titulo} - {preco_atual}")

                    except Exception as e:
                        logger.error(f"Erro ao processar card: {e}")
                        continue

            except Exception as e:
                logger.error(f"Erro ao processar {url}: {e}")
                continue

        logger.info(f"Busca conclu√≠da. Total de ofertas encontradas: {len(ofertas)}")
        return ofertas

    except Exception as e:
        logger.error(f"Erro inesperado ao buscar ofertas: {e}", exc_info=True)
        return []

    finally:
        if driver:
            try:
                driver.quit()
            except:
                pass


async def main():
    """Fun√ß√£o de teste para o m√≥dulo."""
    ofertas = await buscar_ofertas_pelando_selenium(max_paginas=2)

    print(f"\n=== OFERTAS ENCONTRADAS ({len(ofertas)}) ===\n")

    for i, oferta in enumerate(
        ofertas[:5], 1
    ):  # Mostra apenas as 5 primeiras para teste
        print(f"\n--- Oferta {i} ---")
        print(f"T√≠tulo: {oferta['titulo']}")
        print(f"Loja: {oferta['loja']}")
        print(f"Pre√ßo: R$ {oferta['preco']}")
        if oferta["preco_original"]:
            print(f"Pre√ßo original: R$ {oferta['preco_original']}")
        print(f"Desconto: {oferta['desconto']}%")
        print(f"URL: {oferta['url_produto']}")
        print(f"Fonte: {oferta['fonte']}")
        if oferta["imagem_url"]:
            print(f"Imagem: {oferta['imagem_url']}")
        print("-" * 50)


if __name__ == "__main__":
    # Configura logging para debug
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler()
    handler.setFormatter(
        logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    )
    logger.addHandler(handler)

    # Executa o teste
    asyncio.run(main())
