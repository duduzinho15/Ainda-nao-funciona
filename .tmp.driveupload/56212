"""
M√≥dulo de integra√ß√£o com a API da Awin.

Este m√≥dulo fornece fun√ß√µes para buscar ofertas de produtos usando a API da Awin
e gerar links de afiliados para as lojas parceiras.
"""

import asyncio
import logging
import aiohttp
from typing import List, Dict, Any, Optional

import config
from database import adicionar_oferta, oferta_ja_existe_por_id
from telegram_poster import publicar_oferta_automatica

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

# Configura√ß√µes da API Awin
AWIN_API_BASE_URL = "https://api.awin.com"
AWIN_API_VERSION = "v1"
AWIN_API_TOKEN = config.AWIN_API_TOKEN

# Headers padr√£o para todas as requisi√ß√µes
DEFAULT_HEADERS = {
    "Authorization": f"Bearer {AWIN_API_TOKEN}",
    "Content-Type": "application/json",
    "Accept": "application/json",
}

# Lojas parceiras da Awin (ser√£o expandidas conforme aprova√ß√£o)
LOJAS_AWIN = {
    "comfy": {"name": "Comfy", "awin_id": 23377, "enabled": True, "priority": 1},
    "trocafy": {"name": "Trocafy", "awin_id": 51277, "enabled": True, "priority": 2},
    "lg": {"name": "LG", "awin_id": 33061, "enabled": True, "priority": 3},
    "kabum": {"name": "Kabum!", "awin_id": 17729, "enabled": True, "priority": 4},
    "samsung": {
        "name": "Samsung",
        "awin_id": 58389,  # Conferir o ID exato no painel
        "enabled": True,
        "priority": 5,
        "publisher_id": "2510157",  # Samsung usa Publisher ID espec√≠fico
    },
    "dell": {"name": "Dell", "awin_id": None, "enabled": True, "priority": 6},
    "lenovo": {"name": "Lenovo", "awin_id": None, "enabled": True, "priority": 7},
    "acer": {"name": "Acer", "awin_id": None, "enabled": True, "priority": 8},
    "asus": {"name": "ASUS", "awin_id": None, "enabled": True, "priority": 9},
    "casa bahia": {
        "name": "Casa Bahia",
        "awin_id": None,
        "enabled": True,
        "priority": 10,
    },
}


async def atualizar_ids_lojas_awin(session: aiohttp.ClientSession) -> None:
    """
    Consulta a API da Awin para obter os IDs dos anunciantes aprovados
    e atualiza o dicion√°rio LOJAS_AWIN no in√≠cio do ciclo.
    """
    # Acessa o ID do publisher a partir do arquivo de configura√ß√£o
    publisher_id = config.AWIN_PUBLISHER_ID
    if not publisher_id:
        logger.error("AWIN_PUBLISHER_ID n√£o est√° definido no arquivo de configura√ß√£o.")
        return

    logger.info("Iniciando a atualiza√ß√£o dos IDs das lojas parceiras da Awin...")

    # Processa cada loja individualmente com seu Publisher ID apropriado
    for nome_loja_key, detalhes_loja in LOJAS_AWIN.items():
        try:
            # Usa Publisher ID espec√≠fico para Samsung, padr√£o para outras
            if nome_loja_key == "samsung" and "publisher_id" in detalhes_loja:
                current_publisher_id = detalhes_loja["publisher_id"]
            else:
                current_publisher_id = publisher_id

            url = f"{AWIN_API_BASE_URL}/{AWIN_API_VERSION}/publishers/{current_publisher_id}/programmes?relationship=joined"

            logger.info(
                f"Consultando programas para {detalhes_loja['name']} com Publisher ID: {current_publisher_id}"
            )

            async with session.get(url, headers=DEFAULT_HEADERS) as response:
                response.raise_for_status()  # Lan√ßa um erro para status HTTP 4xx/5xx
                programas_aprovados = await response.json()

                if not programas_aprovados or "data" not in programas_aprovados:
                    logger.warning(
                        f"Nenhum programa de afiliado aprovado encontrado para {detalhes_loja['name']} com Publisher ID {current_publisher_id}"
                    )
                    detalhes_loja["enabled"] = False
                    continue

                # Procura pelo nome da loja na resposta da API
                nome_loja_config = detalhes_loja["name"].lower().strip()
                loja_encontrada = False

                for programa in programas_aprovados.get("data", []):
                    advertiser_name = programa.get(
                        "advertiserName", programa.get("name", "")
                    )
                    advertiser_id = programa.get("advertiserId", programa.get("id", ""))

                    if (
                        advertiser_name
                        and advertiser_id
                        and nome_loja_config in advertiser_name.lower().strip()
                    ):
                        detalhes_loja["awin_id"] = advertiser_id
                        detalhes_loja["enabled"] = True
                        logger.info(
                            f"‚úÖ ID da loja '{detalhes_loja['name']}' atualizado para: {advertiser_id}"
                        )
                        loja_encontrada = True
                        break

                if not loja_encontrada:
                    detalhes_loja["enabled"] = False
                    logger.warning(
                        f"‚ö†Ô∏è A loja '{detalhes_loja['name']}' n√£o foi encontrada nos programas aprovados com Publisher ID {current_publisher_id}"
                    )

                # Aguarda um pouco entre as consultas para n√£o sobrecarregar a API
                await asyncio.sleep(1)

        except aiohttp.ClientError as e:
            logger.error(
                f"‚ùå Erro de comunica√ß√£o ao consultar {detalhes_loja['name']}: {e}"
            )
            detalhes_loja["enabled"] = False
        except Exception as e:
            logger.error(
                f"‚ùå Erro inesperado ao processar {detalhes_loja['name']}: {e}"
            )
            detalhes_loja["enabled"] = False

    # Conta lojas ativadas
    lojas_ativadas = sum(1 for detalhes in LOJAS_AWIN.values() if detalhes["enabled"])
    logger.info(f"‚úÖ {lojas_ativadas} lojas Awin foram ativadas com sucesso")


async def obter_programas_parceiros() -> Dict[str, Any]:
    """
    Obt√©m a lista de programas parceiros da Awin onde o usu√°rio foi aprovado.

    Returns:
        Dict com informa√ß√µes dos programas parceiros
    """
    try:
        url = f"{AWIN_API_BASE_URL}/{AWIN_API_VERSION}/publishers/{config.AWIN_PUBLISHER_ID}/programmes"

        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=DEFAULT_HEADERS) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(
                        f"‚úÖ Programas parceiros obtidos: {len(data.get('data', []))}"
                    )
                    return data
                else:
                    logger.error(f"‚ùå Erro ao obter programas: HTTP {response.status}")
                    return {}

    except Exception as e:
        logger.error(f"‚ùå Erro ao obter programas parceiros: {e}")
        return {}


async def buscar_ofertas_awin(
    max_ofertas: int = 20,
    min_desconto: int = 15,
    categorias: Optional[List[str]] = None,
) -> List[Dict[str, Any]]:
    """
    Busca ofertas dispon√≠veis atrav√©s da API da Awin.

    Args:
        max_ofertas: N√∫mero m√°ximo de ofertas para retornar
        min_desconto: Percentual m√≠nimo de desconto
        categorias: Lista de categorias para filtrar (ex: ['electronics', 'computers'])

    Returns:
        Lista de ofertas encontradas
    """
    try:
        logger.info("üöÄ Iniciando busca de ofertas na Awin...")

        # Obt√©m programas parceiros
        programas = await obter_programas_parceiros()
        if not programas:
            logger.warning("‚ö†Ô∏è Nenhum programa parceiro encontrado")
            return []

        # Busca ofertas em cada programa
        todas_ofertas = []

        for programa in programas.get("data", []):
            programa_id = programa.get("id")
            programa_nome = programa.get("name", "Desconhecido")

            if not programa_id:
                continue

            logger.info(f"üîç Buscando ofertas em: {programa_nome}")

            # Busca ofertas do programa
            ofertas_programa = await buscar_ofertas_programa(
                programa_id,
                programa_nome,
                max_ofertas // len(programas.get("data", [1])),
                min_desconto,
                categorias,
            )

            todas_ofertas.extend(ofertas_programa)

            # Aguarda um pouco entre as requisi√ß√µes
            await asyncio.sleep(1)

        # Filtra e ordena ofertas
        ofertas_filtradas = filtrar_ofertas_relevantes(todas_ofertas, min_desconto)
        ofertas_ordenadas = ordenar_ofertas_por_relevancia(ofertas_filtradas)

        logger.info(f"‚úÖ Busca conclu√≠da: {len(ofertas_ordenadas)} ofertas encontradas")
        return ofertas_ordenadas[:max_ofertas]

    except Exception as e:
        logger.error(f"‚ùå Erro na busca de ofertas Awin: {e}")
        return []


async def buscar_ofertas_programa(
    programa_id: str,
    programa_nome: str,
    max_ofertas: int,
    min_desconto: int,
    categorias: Optional[List[str]] = None,
) -> List[Dict[str, Any]]:
    """
    Busca ofertas espec√≠ficas de um programa parceiro.

    Args:
        programa_id: ID do programa na Awin
        programa_nome: Nome do programa
        max_ofertas: N√∫mero m√°ximo de ofertas
        min_desconto: Desconto m√≠nimo
        categorias: Categorias para filtrar

    Returns:
        Lista de ofertas do programa
    """
    try:
        # Endpoint para ofertas do programa
        url = f"{AWIN_API_BASE_URL}/{AWIN_API_VERSION}/publishers/{config.AWIN_PUBLISHER_ID}/programmes/{programa_id}/offers"

        params = {"limit": max_ofertas, "offset": 0, "status": "active"}

        if categorias:
            params["category"] = ",".join(categorias)

        async with aiohttp.ClientSession() as session:
            async with session.get(
                url, headers=DEFAULT_HEADERS, params=params
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    ofertas = data.get("data", [])

                    # Converte para formato padr√£o
                    ofertas_convertidas = []
                    for oferta in ofertas:
                        oferta_convertida = converter_oferta_awin(oferta, programa_nome)
                        if oferta_convertida:
                            ofertas_convertidas.append(oferta_convertida)

                    logger.info(
                        f"üì¶ {len(ofertas_convertidas)} ofertas encontradas em {programa_nome}"
                    )
                    return ofertas_convertidas
                else:
                    logger.warning(
                        f"‚ö†Ô∏è Erro ao buscar ofertas de {programa_nome}: HTTP {response.status}"
                    )
                    return []

    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar ofertas do programa {programa_nome}: {e}")
        return []


def converter_oferta_awin(
    oferta_awin: Dict[str, Any], programa_nome: str
) -> Optional[Dict[str, Any]]:
    """
    Converte uma oferta da Awin para o formato padr√£o do sistema.

    Args:
        oferta_awin: Oferta no formato da Awin
        programa_nome: Nome do programa parceiro

    Returns:
        Oferta convertida ou None se inv√°lida
    """
    try:
        # Extrai informa√ß√µes b√°sicas
        titulo = oferta_awin.get("title", "Produto sem t√≠tulo")
        descricao = oferta_awin.get("description", "")
        url_produto = oferta_awin.get("url", "")
        url_imagem = oferta_awin.get("image_url", "")

        # Extrai pre√ßos
        preco_atual = oferta_awin.get("sale_price")
        preco_original = oferta_awin.get("regular_price")

        if not preco_atual or not url_produto:
            return None

        # Calcula desconto
        desconto = 0
        if preco_original and preco_original > preco_atual:
            desconto = int(((preco_original - preco_atual) / preco_original) * 100)

        # Gera ID √∫nico
        id_produto = f"awin_{programa_nome.lower()}_{hash(url_produto) % 1000000}"

        # Converte para formato padr√£o
        oferta_convertida = {
            "id_produto": id_produto,
            "loja": programa_nome,
            "titulo": titulo,
            "preco": f"R$ {preco_atual:.2f}".replace(".", ","),
            "preco_original": f"R$ {preco_original:.2f}".replace(".", ",")
            if preco_original
            else None,
            "url_produto": url_produto,
            "url_afiliado": url_produto,  # Ser√° convertido pelo affiliate.py
            "url_imagem": url_imagem,
            "fonte": "Awin API",
            "desconto": desconto,
            "descricao": descricao,
            "categoria": oferta_awin.get("category", "Geral"),
            "data_validade": oferta_awin.get("expiry_date"),
            "programa_id": oferta_awin.get("programme_id"),
        }

        return oferta_convertida

    except Exception as e:
        logger.error(f"‚ùå Erro ao converter oferta Awin: {e}")
        return None


def filtrar_ofertas_relevantes(
    ofertas: List[Dict[str, Any]], min_desconto: int
) -> List[Dict[str, Any]]:
    """
    Filtra ofertas por relev√¢ncia (desconto, categoria, etc.).

    Args:
        ofertas: Lista de ofertas para filtrar
        min_desconto: Desconto m√≠nimo

    Returns:
        Lista de ofertas filtradas
    """
    ofertas_filtradas = []

    for oferta in ofertas:
        # Filtra por desconto m√≠nimo
        if oferta.get("desconto", 0) >= min_desconto:
            ofertas_filtradas.append(oferta)

    return ofertas_filtradas


def ordenar_ofertas_por_relevancia(
    ofertas: List[Dict[str, Any]],
) -> List[Dict[str, Any]]:
    """
    Ordena ofertas por relev√¢ncia (desconto, categoria, etc.).

    Args:
        ofertas: Lista de ofertas para ordenar

    Returns:
        Lista de ofertas ordenadas
    """

    def chave_ordenacao(oferta):
        # Prioriza por desconto, depois por categoria relevante
        desconto = oferta.get("desconto", 0)
        categoria = oferta.get("categoria", "").lower()

        # Categorias de alta prioridade
        if any(
            termo in categoria for termo in ["gamer", "pc", "notebook", "smartphone"]
        ):
            prioridade_categoria = 100
        elif any(termo in categoria for termo in ["eletronicos", "tecnologia"]):
            prioridade_categoria = 50
        else:
            prioridade_categoria = 0

        return (desconto, prioridade_categoria)

    return sorted(ofertas, key=chave_ordenacao, reverse=True)


async def verificar_ofertas_awin_periodicamente(context) -> None:
    """
    Fun√ß√£o para verificar ofertas da Awin periodicamente.
    Esta fun√ß√£o √© chamada pelo JobQueue do Telegram.

    Args:
        context: Contexto do bot do Telegram
    """
    try:
        logger.info("üîÑ Iniciando verifica√ß√£o peri√≥dica de ofertas Awin...")

        # PASSO 1: ATUALIZAR DINAMICAMENTE OS IDs DAS LOJAS AWIN
        async with aiohttp.ClientSession() as session:
            await atualizar_ids_lojas_awin(session)

            # PASSO 2: CONTINUAR COM A L√ìGICA DE BUSCA DE OFERTAS
            # A fun√ß√£o abaixo agora pode usar os IDs preenchidos em LOJAS_AWIN
            ofertas = await buscar_ofertas_awin(max_ofertas=10, min_desconto=20)

        if not ofertas:
            logger.info("‚ÑπÔ∏è Nenhuma oferta relevante encontrada na Awin")
            return

        # Processa cada oferta
        for oferta in ofertas:
            try:
                # Verifica se j√° foi publicada
                if not oferta_ja_existe_por_id(oferta["id_produto"], oferta["loja"]):
                    # Adiciona ao banco de dados
                    adicionar_oferta(
                        {
                            "id_produto": oferta["id_produto"],
                            "loja": oferta["loja"],
                            "titulo": oferta["titulo"],
                            "preco": oferta["preco"],
                            "preco_original": oferta.get("preco_original"),
                            "url_produto": oferta["url_produto"],
                            "url_afiliado": oferta["url_afiliado"],
                            "url_imagem": oferta.get("url_imagem"),
                            "fonte": oferta["fonte"],
                        }
                    )

                    # Publica no Telegram
                    await publicar_oferta_automatica(oferta, context)

                    logger.info(f"‚úÖ Oferta publicada: {oferta['titulo'][:50]}...")

                    # Aguarda um pouco entre publica√ß√µes
                    await asyncio.sleep(2)
                else:
                    logger.debug(f"‚ÑπÔ∏è Oferta j√° existe: {oferta['id_produto']}")

            except Exception as e:
                logger.error(f"‚ùå Erro ao processar oferta: {e}")
                continue

        logger.info(
            f"‚úÖ Verifica√ß√£o peri√≥dica Awin conclu√≠da: {len(ofertas)} ofertas processadas"
        )

    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o peri√≥dica Awin: {e}")


# Fun√ß√£o para teste direto
async def testar_api_awin():
    """Fun√ß√£o para testar a API da Awin diretamente."""
    print("üß™ Testando API da Awin...")

    try:
        # Testa obten√ß√£o de programas
        programas = await obter_programas_parceiros()
        print(f"‚úÖ Programas encontrados: {len(programas.get('data', []))}")

        # Testa busca de ofertas
        ofertas = await buscar_ofertas_awin(max_ofertas=5, min_desconto=10)
        print(f"‚úÖ Ofertas encontradas: {len(ofertas)}")

        for i, oferta in enumerate(ofertas[:3], 1):
            print(f"\nüì¶ Oferta {i}:")
            print(f"   T√≠tulo: {oferta['titulo'][:60]}...")
            print(f"   Loja: {oferta['loja']}")
            print(f"   Pre√ßo: {oferta['preco']}")
            print(f"   Desconto: {oferta['desconto']}%")

        return True

    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False


if __name__ == "__main__":
    # Executa teste se chamado diretamente
    asyncio.run(testar_api_awin())


# Helper para obter merchant ID de uma loja
def get_awin_merchant_id(slug: str) -> int | None:
    """Retorna o merchant ID (awin_id) de uma loja pelo slug"""
    d = LOJAS_AWIN.get(slug)
    return int(d["awin_id"]) if d and d.get("awin_id") else None
