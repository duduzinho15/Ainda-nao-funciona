#!/usr/bin/env python3
"""
API de Busca da Shopee
Usa a API de busca para obter nomes reais dos produtos
"""

import requests
import time
import logging
from typing import Optional, Dict, Any, List
import random

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class ShopeeSearchAPI:
    """API de busca da Shopee para obter dados reais dos produtos"""

    def __init__(self):
        self.session = requests.Session()

        # Headers para API de busca da Shopee
        self.session.headers.update(
            {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Accept": "application/json, text/plain, */*",
                "Accept-Language": "pt-BR,pt;q=0.9,en;q=0.8",
                "Accept-Encoding": "gzip, deflate, br",
                "Connection": "keep-alive",
                "Referer": "https://shopee.com.br/",
                "Origin": "https://shopee.com.br",
            }
        )

        # URLs da API de busca da Shopee
        self.search_api = "https://shopee.com.br/api/v4/search/search_items"
        self.item_api = "https://shopee.com.br/api/v4/item/get"

    def _add_delay(self):
        """Adiciona delay aleat√≥rio"""
        time.sleep(random.uniform(1, 2))

    def search_product_by_id(
        self, shop_id: str, item_id: str
    ) -> Optional[Dict[str, Any]]:
        """Busca produto espec√≠fico por ID usando a API de busca"""
        try:
            logger.info(f"üîç Buscando produto: Shop ID {shop_id}, Item ID {item_id}")

            # 1. TENTATIVA: Busca direta por ID
            search_result = self._search_by_item_id(item_id)
            if search_result:
                # Procura pelo item espec√≠fico
                for item in search_result:
                    if (
                        str(item.get("shopid")) == shop_id
                        and str(item.get("itemid")) == item_id
                    ):
                        logger.info(
                            f"‚úÖ Produto encontrado via busca: {item.get('name', 'N/A')}"
                        )
                        return self._format_product_data(item)

            # 2. TENTATIVA: Busca por shop_id + item_id
            shop_search_result = self._search_by_shop_and_item(shop_id, item_id)
            if shop_search_result:
                logger.info(
                    f"‚úÖ Produto encontrado via busca da loja: {shop_search_result.get('name', 'N/A')}"
                )
                return shop_search_result

            # 3. TENTATIVA: API direta do item
            item_result = self._get_item_direct(shop_id, item_id)
            if item_result:
                logger.info(
                    f"‚úÖ Produto encontrado via API direta: {item_result.get('name', 'N/A')}"
                )
                return item_result

            logger.warning("‚ö†Ô∏è Produto n√£o encontrado em nenhuma API")
            return None

        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar produto: {e}")
            return None

    def _search_by_item_id(self, item_id: str) -> Optional[List[Dict[str, Any]]]:
        """Busca produtos por ID do item"""
        try:
            self._add_delay()

            # Par√¢metros de busca
            search_params = {
                "keyword": item_id,
                "limit": 50,
                "newest": 0,
                "order": "desc",
                "page_type": "search",
                "scenario": "PAGE_GLOBAL_SEARCH",
                "version": 2,
            }

            logger.info(f"   üîç Buscando por ID do item: {item_id}")

            response = self.session.get(
                self.search_api, params=search_params, timeout=15
            )

            if response.status_code == 200:
                search_data = response.json()

                if "items" in search_data and search_data["items"]:
                    logger.info(
                        f"   üìä {len(search_data['items'])} produtos encontrados na busca"
                    )
                    return search_data["items"]
                else:
                    logger.info("   üìä Nenhum produto encontrado na busca")

            return None

        except Exception as e:
            logger.debug(f"Erro na busca por ID: {e}")
            return None

    def _search_by_shop_and_item(
        self, shop_id: str, item_id: str
    ) -> Optional[Dict[str, Any]]:
        """Busca produto espec√≠fico por shop_id e item_id"""
        try:
            self._add_delay()

            # Tenta buscar produtos da loja espec√≠fica
            search_params = {
                "shopid": shop_id,
                "limit": 100,
                "newest": 0,
                "order": "desc",
                "page_type": "shop",
                "scenario": "PAGE_SHOP_SEARCH",
                "version": 2,
            }

            logger.info(f"   üîç Buscando produtos da loja {shop_id}")

            response = self.session.get(
                self.search_api, params=search_params, timeout=15
            )

            if response.status_code == 200:
                search_data = response.json()

                if "items" in search_data and search_data["items"]:
                    # Procura pelo item espec√≠fico
                    for item in search_data["items"]:
                        if str(item.get("itemid")) == item_id:
                            logger.info(
                                f"   ‚úÖ Item encontrado na loja: {item.get('name', 'N/A')}"
                            )
                            return self._format_product_data(item)

            return None

        except Exception as e:
            logger.debug(f"Erro na busca da loja: {e}")
            return None

    def _get_item_direct(self, shop_id: str, item_id: str) -> Optional[Dict[str, Any]]:
        """Tenta obter item diretamente via API"""
        try:
            self._add_delay()

            # M√∫ltiplas URLs de API para tentar
            api_urls = [
                f"{self.item_api}?itemid={item_id}&shopid={shop_id}",
                f"{self.item_api}?itemid={item_id}&shopid={shop_id}&version=1",
                f"{self.item_api}?itemid={item_id}&shopid={shop_id}&version=2",
            ]

            for api_url in api_urls:
                try:
                    logger.info(f"   üîç Tentando API direta: {api_url}")

                    response = self.session.get(api_url, timeout=15)

                    if response.status_code == 200:
                        api_data = response.json()

                        if "data" in api_data and api_data["data"]:
                            item_data = api_data["data"]
                            logger.info(
                                f"   ‚úÖ API direta funcionou: {item_data.get('name', 'N/A')}"
                            )
                            return self._format_product_data(item_data)

                    time.sleep(0.5)

                except Exception as e:
                    logger.debug(f"   ‚ö†Ô∏è API direta falhou: {e}")
                    continue

            return None

        except Exception as e:
            logger.debug(f"Erro na API direta: {e}")
            return None

    def _format_product_data(self, item_data: Dict[str, Any]) -> Dict[str, Any]:
        """Formata dados do produto para o formato padr√£o"""
        try:
            formatted_data = {}

            # T√≠tulo
            if "name" in item_data:
                formatted_data["title"] = item_data["name"]
            elif "title" in item_data:
                formatted_data["title"] = item_data["title"]
            else:
                formatted_data["title"] = "Produto Shopee"

            # Imagem
            if "image" in item_data:
                formatted_data["image_url"] = item_data["image"]
            elif "images" in item_data and item_data["images"]:
                # Constr√≥i URL de imagem real da Shopee
                image_hash = item_data["images"][0]
                formatted_data["image_url"] = (
                    f"https://cf.shopee.com.br/file/{image_hash}"
                )
            else:
                formatted_data["image_url"] = None

            # Descri√ß√£o
            if "description" in item_data:
                formatted_data["description"] = item_data["description"]
            else:
                formatted_data["description"] = None

            # Pre√ßo
            if "price" in item_data:
                formatted_data["price"] = item_data["price"]

            # Avalia√ß√£o
            if "rating_star" in item_data:
                formatted_data["rating_star"] = item_data["rating_star"]

            # Nome da loja
            if "shop_name" in item_data:
                formatted_data["shop_name"] = item_data["shop_name"]

            return formatted_data

        except Exception as e:
            logger.error(f"Erro ao formatar dados: {e}")
            return {}

    def test_image_url(self, image_url: str) -> bool:
        """Testa se a URL da imagem √© v√°lida"""
        try:
            response = self.session.head(image_url, timeout=10)
            return response.status_code == 200
        except:
            return False


def main():
    """Teste da API de busca da Shopee"""
    print("üß™ TESTANDO API DE BUSCA DA SHOPEE")
    print("=" * 60)

    api = ShopeeSearchAPI()

    # IDs de teste baseados nos logs anteriores
    test_products = [
        ("366295833", "18297606894"),
        ("1193388723", "22193671026"),
        ("1096310433", "23397649584"),
    ]

    for i, (shop_id, item_id) in enumerate(test_products, 1):
        print(f"\nüîç Teste {i}: Shop ID {shop_id}, Item ID {item_id}")

        try:
            result = api.search_product_by_id(shop_id, item_id)

            if result:
                print(f"   ‚úÖ T√≠tulo: {result.get('title', 'N/A')}")
                print(f"   ‚úÖ Imagem: {result.get('image_url', 'N/A')}")
                print(f"   ‚úÖ Descri√ß√£o: {result.get('description', 'N/A')}")
                print(f"   ‚úÖ Pre√ßo: {result.get('price', 'N/A')}")
                print(f"   ‚úÖ Avalia√ß√£o: {result.get('rating_star', 'N/A')}")
                print(f"   ‚úÖ Loja: {result.get('shop_name', 'N/A')}")

                # Testa a URL da imagem
                if result.get("image_url"):
                    is_valid = api.test_image_url(result["image_url"])
                    print(f"   üñºÔ∏è Imagem v√°lida: {'‚úÖ Sim' if is_valid else '‚ùå N√£o'}")
            else:
                print("   ‚ùå Falha na extra√ß√£o")

        except Exception as e:
            print(f"   ‚ùå Erro: {e}")

        print("-" * 40)

        # Pausa entre testes
        if i < len(test_products):
            time.sleep(2)


if __name__ == "__main__":
    main()
