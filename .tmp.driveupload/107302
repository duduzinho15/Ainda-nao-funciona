#!/usr/bin/env python3
"""
Script de Instala√ß√£o para Produ√ß√£o - Sistema de Recomenda√ß√µes
Instala e configura automaticamente o ambiente de produ√ß√£o
"""

import sys
import subprocess
import platform
import shutil
from pathlib import Path


class ProductionInstaller:
    """Instalador automatizado para ambiente de produ√ß√£o"""

    def __init__(self):
        self.system = platform.system().lower()
        self.python_version = sys.version_info
        self.current_dir = Path.cwd()

        # Configura√ß√µes de instala√ß√£o
        self.install_config = {
            "python_min_version": (3, 11),
            "venv_name": "venv_production",
            "requirements_file": "requirements_production.txt",
            "backup_requirements": "requirements.txt",
        }

        # Status da instala√ß√£o
        self.install_status = {
            "python_check": False,
            "venv_created": False,
            "dependencies_installed": False,
            "directories_created": False,
            "config_generated": False,
        }

    def run_installation(self) -> bool:
        """Executa instala√ß√£o completa"""
        print("üöÄ Instalador de Produ√ß√£o - Sistema de Recomenda√ß√µes")
        print("=" * 60)

        try:
            # 1. Verifica pr√©-requisitos
            if not self._check_prerequisites():
                return False

            # 2. Cria ambiente virtual
            if not self._create_virtual_environment():
                return False

            # 3. Instala depend√™ncias
            if not self._install_dependencies():
                return False

            # 4. Cria estrutura de diret√≥rios
            if not self._create_directory_structure():
                return False

            # 5. Gera configura√ß√µes
            if not self._generate_configurations():
                return False

            # 6. Executa testes b√°sicos
            if not self._run_basic_tests():
                return False

            # 7. Finaliza instala√ß√£o
            self._finalize_installation()

            return True

        except Exception as e:
            print(f"\n‚ùå Erro durante instala√ß√£o: {e}")
            return False

    def _check_prerequisites(self) -> bool:
        """Verifica pr√©-requisitos do sistema"""
        print("\nüîç Verificando pr√©-requisitos...")

        # Verifica vers√£o do Python
        if self.python_version < self.install_config["python_min_version"]:
            print(
                f"‚ùå Python {self.install_config['python_min_version'][0]}.{self.install_config['python_min_version'][1]}+ requerido"
            )
            print(
                f"   Vers√£o atual: {self.python_version.major}.{self.python_version.minor}"
            )
            return False

        print(
            f"‚úÖ Python {self.python_version.major}.{self.python_version.minor}.{self.python_version.micro}"
        )

        # Verifica se pip est√° dispon√≠vel
        try:
            subprocess.run(
                [sys.executable, "-m", "pip", "--version"],
                check=True,
                capture_output=True,
            )
            print("‚úÖ Pip dispon√≠vel")
        except subprocess.CalledProcessError:
            print("‚ùå Pip n√£o dispon√≠vel")
            return False

        # Verifica se venv est√° dispon√≠vel
        try:
            subprocess.run(
                [sys.executable, "-m", "venv", "--help"],
                check=True,
                capture_output=True,
            )
            print("‚úÖ M√≥dulo venv dispon√≠vel")
        except subprocess.CalledProcessError:
            print("‚ùå M√≥dulo venv n√£o dispon√≠vel")
            return False

        # Verifica espa√ßo em disco
        try:
            total, used, free = shutil.disk_usage(".")
            free_gb = free // (1024**3)
            if free_gb < 2:
                print(f"‚ùå Espa√ßo em disco insuficiente. Livre: {free_gb}GB")
                return False
            print(f"‚úÖ Espa√ßo em disco: {free_gb}GB livre")
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel verificar espa√ßo em disco: {e}")

        self.install_status["python_check"] = True
        print("‚úÖ Pr√©-requisitos verificados")
        return True

    def _create_virtual_environment(self) -> bool:
        """Cria ambiente virtual Python"""
        print("\nüêç Criando ambiente virtual...")

        venv_path = self.current_dir / self.install_config["venv_name"]

        # Remove ambiente virtual existente se houver
        if venv_path.exists():
            print("üóëÔ∏è Removendo ambiente virtual existente...")
            shutil.rmtree(venv_path)

        try:
            # Cria ambiente virtual
            subprocess.run(
                [sys.executable, "-m", "venv", str(venv_path)],
                check=True,
                capture_output=True,
            )
            print(f"‚úÖ Ambiente virtual criado: {venv_path}")

            # Verifica se foi criado corretamente
            if self.system == "windows":
                python_path = venv_path / "Scripts" / "python.exe"
                pip_path = venv_path / "Scripts" / "pip.exe"
            else:
                python_path = venv_path / "bin" / "python"
                pip_path = venv_path / "bin" / "pip"

            if not python_path.exists():
                print("‚ùå Ambiente virtual criado incorretamente")
                return False

            self.install_status["venv_created"] = True
            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao criar ambiente virtual: {e}")
            return False

    def _install_dependencies(self) -> bool:
        """Instala depend√™ncias do sistema"""
        print("\nüì¶ Instalando depend√™ncias...")

        try:
            # Determina caminhos do ambiente virtual
            if self.system == "windows":
                python_path = (
                    self.current_dir
                    / self.install_config["venv_name"]
                    / "Scripts"
                    / "python.exe"
                )
                pip_path = (
                    self.current_dir
                    / self.install_config["venv_name"]
                    / "Scripts"
                    / "pip.exe"
                )
            else:
                python_path = (
                    self.current_dir
                    / self.install_config["venv_name"]
                    / "bin"
                    / "python"
                )
                pip_path = (
                    self.current_dir / self.install_config["venv_name"] / "bin" / "pip"
                )

            # Atualiza pip
            print("   Atualizando pip...")
            subprocess.run(
                [str(pip_path), "install", "--upgrade", "pip"],
                check=True,
                capture_output=True,
            )

            # Verifica se requirements existe
            requirements_file = (
                self.current_dir / self.install_config["requirements_file"]
            )
            if not requirements_file.exists():
                # Usa requirements padr√£o se n√£o existir
                backup_file = (
                    self.current_dir / self.install_config["backup_requirements"]
                )
                if backup_file.exists():
                    print(f"   Usando {self.install_config['backup_requirements']}")
                    requirements_file = backup_file
                else:
                    print("‚ùå Arquivo de requirements n√£o encontrado")
                    return False

            # Instala depend√™ncias
            print("   Instalando depend√™ncias...")
            result = subprocess.run(
                [str(pip_path), "install", "-r", str(requirements_file)],
                capture_output=True,
                text=True,
            )

            if result.returncode != 0:
                print("‚ùå Erro na instala√ß√£o de depend√™ncias:")
                print(result.stderr)
                return False

            print("‚úÖ Depend√™ncias instaladas com sucesso")
            self.install_status["dependencies_installed"] = True
            return True

        except Exception as e:
            print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
            return False

    def _create_directory_structure(self) -> bool:
        """Cria estrutura de diret√≥rios necess√°ria"""
        print("\nüìÅ Criando estrutura de diret√≥rios...")

        directories = [
            "logs",
            "backups",
            "storage/data",
            "storage/temp",
            "migrations",
            "deployment",
            "dashboard/templates",
            "dashboard/static",
        ]

        try:
            for directory in directories:
                dir_path = self.current_dir / directory
                dir_path.mkdir(parents=True, exist_ok=True)
                print(f"   ‚úÖ {directory}")

            # Cria arquivos vazios necess√°rios
            empty_files = [
                "logs/.gitkeep",
                "backups/.gitkeep",
                "storage/data/.gitkeep",
                "storage/temp/.gitkeep",
            ]

            for file_path in empty_files:
                file_path_obj = self.current_dir / file_path
                file_path_obj.parent.mkdir(parents=True, exist_ok=True)
                file_path_obj.touch()

            self.install_status["directories_created"] = True
            print("‚úÖ Estrutura de diret√≥rios criada")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rios: {e}")
            return False

    def _generate_configurations(self) -> bool:
        """Gera arquivos de configura√ß√£o"""
        print("\n‚öôÔ∏è Gerando configura√ß√µes...")

        try:
            # Cria arquivo de configura√ß√£o de produ√ß√£o
            config_content = self._generate_production_config()
            config_file = self.current_dir / "config_producao.env"

            with open(config_file, "w", encoding="utf-8") as f:
                f.write(config_content)

            print(f"   ‚úÖ {config_file}")

            # Cria arquivo .env de exemplo
            env_example_content = self._generate_env_example()
            env_example_file = self.current_dir / ".env.example"

            with open(env_example_file, "w", encoding="utf-8") as f:
                f.write(env_example_content)

            print(f"   ‚úÖ {env_example_file}")

            # Cria arquivo de configura√ß√£o do dashboard
            dashboard_config_content = self._generate_dashboard_config()
            dashboard_config_file = self.current_dir / "dashboard" / "config.py"

            with open(dashboard_config_file, "w", encoding="utf-8") as f:
                f.write(dashboard_config_content)

            print(f"   ‚úÖ {dashboard_config_file}")

            self.install_status["config_generated"] = True
            print("‚úÖ Configura√ß√µes geradas")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao gerar configura√ß√µes: {e}")
            return False

    def _generate_production_config(self) -> str:
        """Gera conte√∫do do arquivo de configura√ß√£o de produ√ß√£o"""
        return """# Configura√ß√£o de Produ√ß√£o - Sistema de Recomenda√ß√µes
# Este arquivo cont√©m configura√ß√µes sens√≠veis - N√ÉO COMMITAR NO GIT

# Telegram Bot
TELEGRAM_BOT_TOKEN=seu_token_aqui
TELEGRAM_CHANNEL_ID=seu_canal_id_aqui
TELEGRAM_ADMIN_ID=seu_admin_id_aqui

# APIs de Afiliados
AMAZON_ASSOCIATE_TAG=sua_tag_aqui
AWIN_API_TOKEN=seu_token_aqui
SHOPEE_API_KEY=sua_api_key_aqui
SHOPEE_API_SECRET=seu_secret_aqui
ALIEXPRESS_APP_KEY=sua_app_key_aqui
ALIEXPRESS_APP_SECRET=seu_app_secret_aqui
MERCADO_LIVRE_TAG=sua_tag_aqui
MAGAZINE_LUIZA_TAG=sua_tag_aqui

# Banco de Dados
DATABASE_URL=sqlite:///production.db
DATABASE_BACKUP_PATH=./backups/
DATABASE_BACKUP_RETENTION_DAYS=30

# Servidor
HOST=0.0.0.0
PORT=8080
DEBUG=false
SECRET_KEY=chave_secreta_gerada_automaticamente

# Monitoramento
HEALTH_CHECK_INTERVAL=300
ALERT_EMAIL=seu_email@exemplo.com
ALERT_SMS_NUMBER=seu_numero_aqui
SLACK_WEBHOOK_URL=sua_webhook_aqui

# Rate Limiting
MAX_REQUESTS_PER_MINUTE=60
MAX_REQUESTS_PER_HOUR=1000

# Logs
LOG_LEVEL=INFO
LOG_FILE=./logs/production.log
LOG_MAX_SIZE=10485760
LOG_BACKUP_COUNT=5

# Dashboard
DASHBOARD_HOST=0.0.0.0
DASHBOARD_PORT=8080
DASHBOARD_DEBUG=false

# Email para alertas
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USE_TLS=true
ALERT_EMAIL_FROM=seu_email@gmail.com
ALERT_EMAIL_PASSWORD=sua_senha_de_app_aqui

# SMS (Twilio)
SMS_PROVIDER=twilio
TWILIO_ACCOUNT_SID=seu_account_sid_aqui
TWILIO_AUTH_TOKEN=seu_auth_token_aqui
TWILIO_FROM_NUMBER=seu_numero_twilio_aqui

# Slack
SLACK_CHANNEL=#alerts
SLACK_USERNAME=Sistema de Alertas

# Webhook personalizado
WEBHOOK_URL=sua_url_webhook_aqui
"""

    def _generate_env_example(self) -> str:
        """Gera arquivo .env de exemplo"""
        return """# Arquivo de exemplo para vari√°veis de ambiente
# Copie este arquivo para .env e configure suas credenciais

# Telegram Bot
TELEGRAM_BOT_TOKEN=your_bot_token_here
TELEGRAM_CHANNEL_ID=your_channel_id_here
TELEGRAM_ADMIN_ID=your_admin_id_here

# APIs de Afiliados
AMAZON_ASSOCIATE_TAG=your_tag_here
AWIN_API_TOKEN=your_token_here
SHOPEE_API_KEY=your_api_key_here
SHOPEE_API_SECRET=your_secret_here
ALIEXPRESS_APP_KEY=your_app_key_here
ALIEXPRESS_APP_SECRET=your_app_secret_here
MERCADO_LIVRE_TAG=your_tag_here
MAGAZINE_LUIZA_TAG=your_tag_here

# Banco de Dados
DATABASE_URL=sqlite:///production.db

# Servidor
HOST=0.0.0.0
PORT=8080
DEBUG=false

# Monitoramento
ALERT_EMAIL=your_email@example.com
SLACK_WEBHOOK_URL=your_webhook_url_here

# Email para alertas
ALERT_EMAIL_FROM=your_email@gmail.com
ALERT_EMAIL_PASSWORD=your_app_password_here
"""

    def _generate_dashboard_config(self) -> str:
        """Gera configura√ß√£o do dashboard"""
        return """# Configura√ß√£o do Dashboard de Produ√ß√£o
# Configura√ß√µes espec√≠ficas para o dashboard web

DASHBOARD_CONFIG = {
    'title': 'Sistema de Recomenda√ß√µes - Dashboard de Produ√ß√£o',
    'refresh_interval': 30,  # segundos
    'max_data_points': 1000,
    'timezone': 'America/Sao_Paulo',
    'theme': 'dark',
    'auto_refresh': True,
    'max_log_lines': 1000,
    'chart_history_hours': 24
}

# Configura√ß√µes de seguran√ßa
SECURITY_CONFIG = {
    'session_timeout': 3600,  # 1 hora
    'max_login_attempts': 5,
    'password_min_length': 8,
    'require_2fa': False
}

# Configura√ß√µes de notifica√ß√µes
NOTIFICATION_CONFIG = {
    'enable_desktop_notifications': True,
    'enable_sound_alerts': True,
    'alert_sound_file': 'alert.wav',
    'notification_position': 'top-right'
}
"""

    def _run_basic_tests(self) -> bool:
        """Executa testes b√°sicos do sistema"""
        print("\nüß™ Executando testes b√°sicos...")

        try:
            # Testa importa√ß√£o dos m√≥dulos principais
            test_modules = [
                "deployment.production_setup",
                "deployment.backup_system",
                "deployment.alert_system",
                "dashboard.production_dashboard",
            ]

            for module in test_modules:
                try:
                    __import__(module)
                    print(f"   ‚úÖ {module}")
                except ImportError as e:
                    print(f"   ‚ùå {module}: {e}")
                    return False

            # Testa cria√ß√£o de inst√¢ncias b√°sicas
            try:
                from deployment.production_setup import ProductionConfig

                config = ProductionConfig()
                print("   ‚úÖ ProductionConfig")
            except Exception as e:
                print(f"   ‚ùå ProductionConfig: {e}")
                return False

            print("‚úÖ Testes b√°sicos passaram")
            return True

        except Exception as e:
            print(f"‚ùå Erro nos testes: {e}")
            return False

    def _finalize_installation(self):
        """Finaliza instala√ß√£o"""
        print("\nüéâ Instala√ß√£o conclu√≠da com sucesso!")
        print("=" * 60)

        # Exibe resumo
        print("\nüìã Resumo da Instala√ß√£o:")
        for step, status in self.install_status.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            step_name = step.replace("_", " ").title()
            print(f"   {status_icon} {step_name}")

        # Exibe pr√≥ximos passos
        print("\nüìã Pr√≥ximos Passos:")
        print("1. Configure suas credenciais no arquivo 'config_producao.env'")
        print("2. Ative o ambiente virtual:")

        if self.system == "windows":
            print(f"   {self.install_config['venv_name']}\\Scripts\\activate")
        else:
            print(f"   source {self.install_config['venv_name']}/bin/activate")

        print("3. Execute o sistema de produ√ß√£o:")
        print("   python deployment/production_setup.py")
        print("4. Inicie o dashboard:")
        print("   python dashboard/production_dashboard.py")
        print("5. Configure backups autom√°ticos:")
        print("   python deployment/backup_system.py")

        # Exibe informa√ß√µes importantes
        print("\n‚ö†Ô∏è IMPORTANTE:")
        print("- Configure suas credenciais reais antes de usar")
        print("- Mantenha o arquivo 'config_producao.env' seguro")
        print("- Monitore os logs em ./logs/")
        print("- Configure backups autom√°ticos")

        print("\nüöÄ Sistema pronto para produ√ß√£o!")
        print(f"üìÅ Diret√≥rio: {self.current_dir}")
        print(f"üêç Ambiente: {self.install_config['venv_name']}")


def main():
    """Fun√ß√£o principal"""
    try:
        installer = ProductionInstaller()

        # Executa instala√ß√£o
        success = installer.run_installation()

        if success:
            print("\n‚úÖ Instala√ß√£o conclu√≠da com sucesso!")
            return 0
        else:
            print("\n‚ùå Instala√ß√£o falhou!")
            return 1

    except KeyboardInterrupt:
        print("\nüõë Instala√ß√£o interrompida pelo usu√°rio")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
