#!/usr/bin/env python3
"""
Sistema Inteligente de Alertas Geek - Aplica√ß√£o Desktop Moderna com Flet
Interface refatorada com design clean, moderno e minimalista
Suporte nativo para temas claro e escuro
"""

import flet as ft
import sys
import os
import threading
import asyncio
import logging
import queue
import json
from typing import Optional

# Adiciona o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importa o sistema inteligente
from intelligent_geek_alert_system import IntelligentGeekAlertSystem

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("geek_alert_flet.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


class GeekAlertFletApp:
    """Aplica√ß√£o Desktop Moderna com Flet para Sistema Inteligente de Alertas"""

    def __init__(self):
        self.page: Optional[ft.Page] = None
        self.running = False
        self.alert_system: Optional[IntelligentGeekAlertSystem] = None
        self.alert_thread: Optional[threading.Thread] = None
        self.log_queue = queue.Queue()
        self.config = self.load_config()

        # Estat√≠sticas do sistema
        self.stats = {
            "total_alerts": 0,
            "total_products": 0,
            "search_cycles": 0,
            "last_alert": None,
            "status": "Parado",
        }

        # Componentes da interface
        self.start_button: Optional[ft.FilledButton] = None
        self.stop_button: Optional[ft.FilledButton] = None
        self.status_text: Optional[ft.Text] = None
        self.quick_stats_text: Optional[ft.Text] = None
        self.logs_list: Optional[ft.ListView] = None
        self.config_fields = {}

        # Configura√ß√µes de tema
        self.current_theme = ft.ThemeMode.LIGHT

    def load_config(self) -> dict:
        """Carrega configura√ß√µes do arquivo"""
        try:
            if os.path.exists("geek_alert_config.json"):
                with open("geek_alert_config.json", "r", encoding="utf-8") as f:
                    return json.load(f)
            else:
                return {}
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
            return {}

    def save_config(self) -> bool:
        """Salva configura√ß√µes"""
        try:
            config = {}
            for key, field in self.config_fields.items():
                config[key] = field.value

            with open("geek_alert_config.json", "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)

            logger.info("‚úÖ Configura√ß√µes salvas")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar configura√ß√µes: {e}")
            return False

    def create_left_panel(self) -> ft.Container:
        """Cria painel lateral esquerdo com controles"""
        # T√≠tulo principal
        title = ft.Text(
            "üéÆ CONTROLES",
            size=24,
            weight=ft.FontWeight.BOLD,
            text_align=ft.TextAlign.CENTER,
            color=ft.Colors.BLUE,
        )

        # Bot√£o Iniciar Sistema
        self.start_button = ft.FilledButton(
            text="üöÄ INICIAR SISTEMA",
            icon=ft.Icons.PLAY_ARROW,
            style=ft.ButtonStyle(
                color=ft.Colors.WHITE,
                bgcolor=ft.Colors.GREEN,
                padding=20,
                shape=ft.RoundedRectangleBorder(radius=10),
            ),
            on_click=self.start_system,
        )

        # Bot√£o Parar Sistema
        self.stop_button = ft.FilledButton(
            text="‚èπÔ∏è PARAR SISTEMA",
            icon=ft.Icons.STOP,
            style=ft.ButtonStyle(
                color=ft.Colors.WHITE,
                bgcolor=ft.Colors.RED,
                padding=20,
                shape=ft.RoundedRectangleBorder(radius=10),
            ),
            on_click=self.stop_system,
            disabled=True,
        )

        # Switch de Tema
        theme_switch = ft.Switch(
            label="üåô Modo Escuro",
            value=False,
            on_change=self.toggle_theme,
            active_color=ft.Colors.BLUE,
        )

        # Separador
        separator = ft.Divider(height=1, color=ft.Colors.GREY_400)

        # Bot√£o Estat√≠sticas
        stats_button = ft.OutlinedButton(
            text="üìä ESTAT√çSTICAS",
            icon=ft.Icons.ANALYTICS,
            style=ft.ButtonStyle(padding=15, shape=ft.RoundedRectangleBorder(radius=8)),
            on_click=self.show_stats,
        )

        # Bot√£o Configura√ß√µes
        config_button = ft.OutlinedButton(
            text="‚öôÔ∏è CONFIGURA√á√ïES",
            icon=ft.Icons.SETTINGS,
            style=ft.ButtonStyle(padding=15, shape=ft.RoundedRectangleBorder(radius=8)),
            on_click=self.show_config,
        )

        # Bot√£o Limpar Logs
        clear_button = ft.OutlinedButton(
            text="üßπ LIMPAR LOGS",
            icon=ft.Icons.CLEAR_ALL,
            style=ft.ButtonStyle(padding=15, shape=ft.RoundedRectangleBorder(radius=8)),
            on_click=self.clear_logs,
        )

        # Status do Sistema
        self.status_text = ft.Text(
            "‚èπÔ∏è PARADO",
            size=18,
            weight=ft.FontWeight.BOLD,
            color=ft.Colors.RED,
            text_align=ft.TextAlign.CENTER,
        )

        status_card = ft.Card(
            content=ft.Container(
                content=ft.Column(
                    [
                        ft.Text(
                            "üì° Status do Sistema", weight=ft.FontWeight.BOLD, size=16
                        ),
                        self.status_text,
                    ],
                    spacing=10,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                ),
                padding=20,
            ),
            elevation=5,
        )

        # Informa√ß√µes R√°pidas
        self.quick_stats_text = ft.Text(
            "Nenhuma atividade", size=12, text_align=ft.TextAlign.CENTER
        )

        info_card = ft.Card(
            content=ft.Container(
                content=ft.Column(
                    [
                        ft.Text("üìä Info R√°pida", weight=ft.FontWeight.BOLD, size=16),
                        self.quick_stats_text,
                    ],
                    spacing=10,
                    horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                ),
                padding=20,
            ),
            elevation=5,
        )

        # Layout do painel esquerdo
        left_content = ft.Column(
            [
                title,
                ft.Container(height=20),  # Espa√ßamento
                self.start_button,
                ft.Container(height=10),
                self.stop_button,
                ft.Container(height=20),
                theme_switch,
                ft.Container(height=20),
                separator,
                ft.Container(height=20),
                stats_button,
                ft.Container(height=10),
                config_button,
                ft.Container(height=10),
                clear_button,
                ft.Container(height=20),
                separator,
                ft.Container(height=20),
                status_card,
                ft.Container(height=15),
                info_card,
            ],
            spacing=0,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        )

        return ft.Container(
            content=left_content,
            width=300,
            padding=20,
            bgcolor=ft.Colors.GREY_100,
            border_radius=10,
            margin=ft.margin.only(right=10),
        )

    def create_main_panel(self) -> ft.Container:
        """Cria painel principal direito com abas"""
        # T√≠tulo principal
        main_title = ft.Text(
            "üöÄ SISTEMA INTELIGENTE DE ALERTAS GEEK",
            size=28,
            weight=ft.FontWeight.BOLD,
            text_align=ft.TextAlign.CENTER,
            color=ft.Colors.BLUE,
        )

        # Aba de Logs
        self.logs_list = ft.ListView(
            expand=True, auto_scroll=True, spacing=5, padding=20
        )

        logs_tab = ft.Tab(
            text="üìù Logs em Tempo Real",
            icon=ft.Icons.ARTICLE,
            content=ft.Container(
                content=ft.Column(
                    [
                        ft.Row(
                            [
                                ft.Checkbox(label="Auto-scroll", value=True),
                                ft.IconButton(
                                    icon=ft.Icons.CLEAR,
                                    tooltip="Limpar logs",
                                    on_click=self.clear_logs_display,
                                ),
                            ],
                            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,
                        ),
                        ft.Container(height=10),
                        ft.Container(
                            content=self.logs_list,
                            expand=True,
                            border=ft.border.all(1, ft.Colors.GREY_400),
                            border_radius=8,
                        ),
                    ]
                ),
                padding=20,
            ),
        )

        # Aba de Configura√ß√µes
        config_tab = ft.Tab(
            text="‚öôÔ∏è Configura√ß√µes",
            icon=ft.Icons.SETTINGS,
            content=self.create_config_tab_content(),
        )

        # Aba de Estat√≠sticas
        stats_tab = ft.Tab(
            text="üìä Estat√≠sticas",
            icon=ft.Icons.ANALYTICS,
            content=self.create_stats_tab_content(),
        )

        # Tabs container
        tabs = ft.Tabs(
            selected_index=0,
            animation_duration=300,
            tabs=[logs_tab, config_tab, stats_tab],
        )

        # Layout do painel principal
        main_content = ft.Column(
            [main_title, ft.Container(height=20), tabs], expand=True
        )

        return ft.Container(
            content=main_content,
            expand=True,
            padding=20,
            bgcolor=ft.Colors.WHITE,
            border_radius=10,
        )

    def create_config_tab_content(self) -> ft.Container:
        """Cria conte√∫do da aba de configura√ß√µes"""
        config_data = [
            ("üîç Intervalo de Busca (minutos)", "search_interval", "5"),
            ("üí∞ Desconto M√≠nimo (%)", "discount_threshold", "15"),
            ("üí∏ Comiss√£o M√≠nima (%)", "commission_threshold", "10"),
            (
                "üì± Chat ID do Telegram",
                "telegram_chat_id",
                self.config.get("telegram_chat_id", ""),
            ),
            (
                "ü§ñ Token do Bot",
                "telegram_bot_token",
                self.config.get("telegram_bot_token", ""),
            ),
            ("üîÑ M√°ximo de Produtos por Busca", "max_products", "20"),
            ("‚è∞ Cooldown entre Alertas (horas)", "alert_cooldown", "6"),
        ]

        config_fields = []
        for label, key, default_value in config_data:
            field = ft.TextField(
                label=label,
                value=default_value,
                border=ft.InputBorder.UNDERLINE,
                expand=True,
                text_size=14,
            )
            self.config_fields[key] = field
            config_fields.append(field)

        # Bot√µes de a√ß√£o
        save_button = ft.FilledButton(
            text="üíæ Salvar Configura√ß√µes",
            icon=ft.Icons.SAVE,
            on_click=self.save_config_click,
        )

        reset_button = ft.OutlinedButton(
            text="üîÑ Resetar", icon=ft.Icons.RESTORE, on_click=self.reset_config
        )

        # Layout das configura√ß√µes
        config_content = ft.Column(
            [
                ft.Text(
                    "‚öôÔ∏è Configura√ß√µes do Sistema", size=20, weight=ft.FontWeight.BOLD
                ),
                ft.Container(height=20),
                *config_fields,
                ft.Container(height=20),
                ft.Row(
                    [save_button, reset_button],
                    alignment=ft.MainAxisAlignment.CENTER,
                    spacing=20,
                ),
            ],
            spacing=15,
        )

        return ft.Container(content=config_content, padding=20, expand=True)

    def create_stats_tab_content(self) -> ft.Container:
        """Cria conte√∫do da aba de estat√≠sticas"""
        # Estat√≠sticas principais
        stats_data = [
            ("üöÄ Status do Sistema", "status"),
            ("üì¢ Total de Alertas", "total_alerts"),
            ("üîç Produtos Analisados", "total_products"),
            ("üîÑ Ciclos de Busca", "search_cycles"),
            ("‚è∞ √öltimo Alerta", "last_alert"),
            ("üí∞ Produtos com Desconto", "products_with_discount"),
            ("üí∏ Comiss√£o Total", "total_commission"),
        ]

        self.stats_vars = {}
        stats_grid = []

        for i, (label, key) in enumerate(stats_data):
            var = ft.Text("0", size=16, weight=ft.FontWeight.BOLD)
            self.stats_vars[key] = var

            stats_grid.append(
                ft.Container(
                    content=ft.Column(
                        [ft.Text(label, size=14, color=ft.Colors.GREY_600), var],
                        horizontal_alignment=ft.CrossAxisAlignment.CENTER,
                    ),
                    padding=20,
                    bgcolor=ft.Colors.GREY_100,
                    border_radius=8,
                    expand=True,
                )
            )

        # Bot√£o atualizar
        refresh_button = ft.FilledButton(
            text="üîÑ Atualizar Estat√≠sticas",
            icon=ft.Icons.REFRESH,
            on_click=self.refresh_stats,
        )

        # Layout das estat√≠sticas
        stats_content = ft.Column(
            [
                ft.Text(
                    "üìä Estat√≠sticas do Sistema", size=20, weight=ft.FontWeight.BOLD
                ),
                ft.Container(height=20),
                ft.GridView(
                    runs_count=2,
                    max_extent=200,
                    child_aspect_ratio=1.5,
                    spacing=15,
                    run_spacing=15,
                    controls=stats_grid,
                ),
                ft.Container(height=20),
                refresh_button,
            ],
            spacing=15,
            horizontal_alignment=ft.CrossAxisAlignment.CENTER,
        )

        return ft.Container(content=stats_content, padding=20, expand=True)

    def toggle_theme(self, e):
        """Alterna entre tema claro e escuro"""
        if e.control.value:
            self.current_theme = ft.ThemeMode.DARK
            self.page.theme_mode = ft.ThemeMode.DARK
        else:
            self.current_theme = ft.ThemeMode.LIGHT
            self.page.theme_mode = ft.ThemeMode.LIGHT

        self.page.update()
        logger.info(
            f"üé® Tema alterado para: {'Escuro' if e.control.value else 'Claro'}"
        )

    def start_system(self, e):
        """Inicia o sistema de alertas"""
        try:
            if self.running:
                self.show_snackbar("Sistema j√° est√° rodando!", ft.Colors.ORANGE)
                return

            logger.info("üöÄ Iniciando Sistema Inteligente de Alertas...")
            self.stats["status"] = "Rodando"

            # Atualiza interface
            self.status_text.value = "üöÄ RODANDO"
            self.status_text.color = ft.Colors.GREEN
            self.start_button.disabled = True
            self.stop_button.disabled = False

            # Inicia o sistema em thread separada
            self.alert_thread = threading.Thread(target=self.run_alert_system)
            self.alert_thread.daemon = True
            self.alert_thread.start()

            self.running = True

            # Mostra notifica√ß√£o
            self.show_snackbar("Sistema iniciado com sucesso!", ft.Colors.GREEN)
            self.page.update()

            logger.info("‚úÖ Sistema iniciado com sucesso")

        except Exception as e:
            logger.error(f"‚ùå Erro ao iniciar sistema: {e}")
            self.show_snackbar(f"Erro ao iniciar sistema: {e}", ft.Colors.RED)

    def stop_system(self, e):
        """Para o sistema de alertas"""
        try:
            if not self.running:
                self.show_snackbar("Sistema n√£o est√° rodando!", ft.Colors.ORANGE)
                return

            logger.info("‚èπÔ∏è Parando Sistema Inteligente de Alertas...")
            self.stats["status"] = "Parado"

            # Para o sistema
            if self.alert_system:
                self.alert_system.stop()

            self.running = False

            # Atualiza interface
            self.status_text.value = "‚èπÔ∏è PARADO"
            self.status_text.color = ft.Colors.RED
            self.start_button.disabled = False
            self.stop_button.disabled = True

            # Mostra notifica√ß√£o
            self.show_snackbar("Sistema parado com sucesso!", ft.Colors.BLUE)
            self.page.update()

            logger.info("‚úÖ Sistema parado com sucesso")

        except Exception as e:
            logger.error(f"‚ùå Erro ao parar sistema: {e}")
            self.show_snackbar(f"Erro ao parar sistema: {e}", ft.Colors.RED)

    def run_alert_system(self):
        """Executa o sistema de alertas em thread separada"""
        try:
            logger.info("üéØ Executando Sistema Inteligente de Alertas...")

            # Cria e executa o sistema
            self.alert_system = IntelligentGeekAlertSystem()

            # Executa o sistema de forma s√≠ncrona
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            try:
                loop.run_until_complete(self.alert_system.run_continuous_search())
            finally:
                loop.close()

        except Exception as e:
            logger.error(f"‚ùå Erro no sistema de alertas: {e}")
            self.running = False
            self.stats["status"] = "Erro"

            # Atualiza interface na thread principal
            self.page.after(0, self.handle_system_error, str(e))

    def handle_system_error(self, error_msg: str):
        """Manipula erros do sistema na thread principal"""
        self.status_text.value = "‚ùå ERRO"
        self.status_text.color = ft.Colors.RED
        self.start_button.disabled = False
        self.stop_button.disabled = True
        self.show_snackbar(f"Erro do sistema: {error_msg}", ft.Colors.RED)
        self.page.update()

    def show_config(self, e):
        """Mostra configura√ß√µes"""
        try:
            # Seleciona a aba de configura√ß√µes (√≠ndice 1)
            if hasattr(self.page, "views") and len(self.page.views) > 0:
                main_view = self.page.views[0]
                if (
                    hasattr(main_view, "controls")
                    and main_view.controls
                    and len(main_view.controls) > 1
                ):
                    main_panel = main_view.controls[1]
                    if (
                        hasattr(main_panel, "controls")
                        and main_panel.controls
                        and len(main_panel.controls) > 1
                    ):
                        tabs = main_panel.controls[1]
                        if hasattr(tabs, "selected_index"):
                            tabs.selected_index = 1
                            self.page.update()
                            logger.info("‚úÖ Aba de configura√ß√µes selecionada")
                        else:
                            logger.warning("‚ö†Ô∏è Tabs n√£o t√™m selected_index")
                    else:
                        logger.warning("‚ö†Ô∏è Main panel n√£o tem controles suficientes")
                else:
                    logger.warning("‚ö†Ô∏è Main view n√£o tem controles suficientes")
            else:
                logger.warning("‚ö†Ô∏è P√°gina n√£o tem views")
        except Exception as e:
            logger.error(f"‚ùå Erro ao mostrar configura√ß√µes: {e}")

    def show_stats(self, e):
        """Mostra estat√≠sticas detalhadas"""
        try:
            stats_content = self.get_detailed_stats()

            # Cria di√°logo de estat√≠sticas
            stats_dialog = ft.AlertDialog(
                title=ft.Text("üìä Estat√≠sticas Detalhadas"),
                content=ft.Text(stats_content, size=14),
                actions=[
                    ft.TextButton("‚ùå Fechar", on_click=lambda _: self.close_dialog())
                ],
            )

            # Usa m√©todo alternativo para di√°logos
            if hasattr(self.page, "dialog"):
                self.page.dialog = stats_dialog
                self.page.dialog.open = True
            else:
                # Fallback: adiciona diretamente √† p√°gina
                self.page.add(stats_dialog)

            self.page.update()
            logger.info("‚úÖ Di√°logo de estat√≠sticas aberto")

        except Exception as e:
            logger.error(f"‚ùå Erro ao mostrar estat√≠sticas: {e}")

    def close_dialog(self):
        """Fecha o di√°logo"""
        try:
            if hasattr(self.page, "dialog") and self.page.dialog:
                self.page.dialog.open = False
                self.page.update()
                logger.info("‚úÖ Di√°logo fechado")
            else:
                # Remove o √∫ltimo controle adicionado (di√°logo)
                if hasattr(self.page, "controls") and self.page.controls:
                    if len(self.page.controls) > 0:
                        self.page.controls.pop()
                        self.page.update()
        except Exception as e:
            logger.error(f"‚ùå Erro ao fechar di√°logo: {e}")

    def get_detailed_stats(self) -> str:
        """Obt√©m estat√≠sticas detalhadas"""
        try:
            stats = {
                "Status do Sistema": self.stats["status"],
                "Total de Alertas": self.stats["total_alerts"],
                "Produtos Analisados": self.stats["total_products"],
                "Ciclos de Busca": self.stats["search_cycles"],
                "√öltimo Alerta": str(self.stats["last_alert"])
                if self.stats["last_alert"]
                else "Nenhum",
            }

            content = "üìä ESTAT√çSTICAS DO SISTEMA\n"
            content += "=" * 40 + "\n\n"

            for key, value in stats.items():
                content += f"{key}: {value}\n"

            return content

        except Exception as e:
            return f"Erro ao obter estat√≠sticas: {e}"

    def refresh_stats(self, e=None):
        """Atualiza estat√≠sticas"""
        try:
            # Atualiza vari√°veis de estat√≠sticas
            for key, var in self.stats_vars.items():
                if key in self.stats:
                    var.value = str(self.stats[key])
                else:
                    var.value = "0"

            # Atualiza estat√≠sticas r√°pidas
            self.update_quick_stats()

            # Atualiza status do sistema
            self.update_system_status()

            self.page.update()

        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar estat√≠sticas: {e}")

    def update_system_status(self):
        """Atualiza status do sistema"""
        try:
            if self.running:
                self.status_text.value = "üöÄ RODANDO"
                self.status_text.color = ft.Colors.GREEN
            else:
                self.status_text.value = "‚èπÔ∏è PARADO"
                self.status_text.color = ft.Colors.RED
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar status: {e}")

    def update_quick_stats(self):
        """Atualiza estat√≠sticas r√°pidas"""
        try:
            if self.running:
                status_text = f"üîÑ {self.stats['search_cycles']} ciclos ‚Ä¢ üì¢ {self.stats['total_alerts']} alertas"
            else:
                status_text = "Sistema parado"

            self.quick_stats_text.value = status_text

        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar estat√≠sticas r√°pidas: {e}")

    def clear_logs(self, e):
        """Limpa arquivo de logs"""
        try:
            with open("geek_alert_flet.log", "w", encoding="utf-8") as f:
                f.write("")

            self.clear_logs_display()
            self.show_snackbar("Logs limpos com sucesso!", ft.Colors.GREEN)

        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar logs: {e}")
            self.show_snackbar(f"Erro ao limpar logs: {e}", ft.Colors.RED)

    def clear_logs_display(self, e=None):
        """Limpa display de logs"""
        try:
            self.logs_list.controls.clear()
            self.logs_list.controls.append(
                ft.Text("Logs limpos.", color=ft.Colors.GREY_600)
            )
            self.page.update()
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar display de logs: {e}")

    def save_config_click(self, e):
        """Salva configura√ß√µes"""
        if self.save_config():
            self.show_snackbar("Configura√ß√µes salvas com sucesso!", ft.Colors.GREEN)
        else:
            self.show_snackbar("Erro ao salvar configura√ß√µes!", ft.Colors.RED)

    def reset_config(self, e):
        """Reseta configura√ß√µes para padr√£o"""
        try:
            default_config = {
                "search_interval": "5",
                "discount_threshold": "15",
                "commission_threshold": "10",
                "telegram_chat_id": "",
                "telegram_bot_token": "",
                "max_products": "20",
                "alert_cooldown": "6",
            }

            for key, value in default_config.items():
                if key in self.config_fields:
                    self.config_fields[key].value = value

            self.show_snackbar("Configura√ß√µes resetadas para padr√£o!", ft.Colors.BLUE)
            self.page.update()

        except Exception as e:
            logger.error(f"‚ùå Erro ao resetar configura√ß√µes: {e}")
            self.show_snackbar(f"Erro ao resetar configura√ß√µes: {e}", ft.Colors.RED)

    def show_snackbar(self, message: str, color: str):
        """Mostra mensagem snackbar"""
        try:
            # Verifica se o m√©todo existe na vers√£o atual do Flet
            if hasattr(self.page, "show_snack_bar"):
                self.page.show_snack_bar(
                    ft.SnackBar(content=ft.Text(message), bgcolor=color, action="OK")
                )
            else:
                # Fallback: mostra no log se snackbar n√£o estiver dispon√≠vel
                logger.info(f"üí¨ {message}")
                print(f"üí¨ {message}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao mostrar snackbar: {e}")
            print(f"üí¨ {message}")

    def update_logs(self):
        """Atualiza logs em tempo real"""
        try:
            # Verifica se h√° novos logs
            try:
                with open("geek_alert_flet.log", "r", encoding="utf-8") as f:
                    content = f.read()

                    # Atualiza apenas se o conte√∫do mudou
                    if (
                        hasattr(self, "last_log_content")
                        and self.last_log_content == content
                    ):
                        pass
                    else:
                        # Limpa logs antigos
                        self.logs_list.controls.clear()

                        # Adiciona novos logs
                        for line in content.split("\n"):
                            if line.strip():
                                self.logs_list.controls.append(
                                    ft.Text(
                                        line,
                                        size=12,
                                        font_family="Consolas",
                                        color=ft.Colors.BLACK,
                                    )
                                )

                        self.last_log_content = content

            except FileNotFoundError:
                pass

            # Atualiza estat√≠sticas automaticamente
            self.refresh_stats()

            # Agenda pr√≥xima atualiza√ß√£o usando threading
            import threading
            import time

            def schedule_next_update():
                time.sleep(2)  # Aguarda 2 segundos
                if hasattr(self, "page") and self.page:
                    try:
                        # Tenta usar page.after se dispon√≠vel
                        if hasattr(self.page, "after"):
                            self.page.after(0, self.update_logs)
                        else:
                            # Fallback: chama diretamente
                            self.update_logs()
                    except:
                        # Se falhar, chama diretamente
                        self.update_logs()

            update_thread = threading.Thread(target=schedule_next_update)
            update_thread.daemon = True
            update_thread.start()

        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar logs: {e}")

    def main(self, page: ft.Page):
        """Fun√ß√£o principal da aplica√ß√£o Flet"""
        self.page = page

        # Configura√ß√£o da p√°gina
        page.title = "üöÄ Sistema Inteligente de Alertas Geek"
        page.theme_mode = self.current_theme

        # Usa m√©todos alternativos para configura√ß√£o de janela
        try:
            if hasattr(page, "window_width"):
                page.window_width = 1200
                page.window_height = 800
            elif hasattr(page, "window_size"):
                # Fallback para vers√µes mais antigas
                page.window_size = (1200, 800)
        except:
            pass

        page.window_resizable = True
        page.padding = 20
        page.spacing = 20

        # Cria layout principal
        left_panel = self.create_left_panel()
        main_panel = self.create_main_panel()

        # Layout principal com dois pain√©is
        page.add(ft.Row([left_panel, main_panel], expand=True, spacing=20))

        # Inicia atualiza√ß√£o de logs
        self.update_logs()

        logger.info("üöÄ Aplica√ß√£o Flet iniciada com sucesso!")


def main():
    """Fun√ß√£o principal"""
    try:
        app = GeekAlertFletApp()
        ft.app(target=app.main)

    except Exception as e:
        logger.error(f"‚ùå Erro na aplica√ß√£o: {e}")
        print(f"‚ùå Erro fatal na aplica√ß√£o: {e}")


if __name__ == "__main__":
    main()
