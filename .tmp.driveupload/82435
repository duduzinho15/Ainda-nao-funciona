#!/usr/bin/env python3
"""
SOLUÇÃO FINAL para Windows - Dashboard Garimpeiro Geek
"""

import os
import sys
from pathlib import Path

# Adiciona o diretório raiz ao path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def start_dashboard_windows():
    """Inicia o dashboard com configurações específicas para Windows"""
    print("🚀 Iniciando Dashboard Garimpeiro Geek...")
    print("🔧 Configurações específicas para Windows")

    try:
        from app import app

        # Configurações específicas para Windows
        app.config["ENV"] = "production"
        app.config["DEBUG"] = False
        app.config["TESTING"] = False

        print("✅ App configurado")
        print("🌐 Iniciando servidor...")
        print("💡 Se não funcionar, tente executar como administrador")

        # Tenta porta 8080 primeiro (menos restritiva)
        try:
            print("🔄 Tentando porta 8080...")
            app.run(
                host="127.0.0.1",
                port=8080,
                debug=False,
                use_reloader=False,
                threaded=True,
            )
        except Exception as e:
            print(f"⚠️ Porta 8080 falhou: {e}")
            print("🔄 Tentando porta 3000...")

            try:
                app.run(
                    host="127.0.0.1",
                    port=3000,
                    debug=False,
                    use_reloader=False,
                    threaded=True,
                )
            except Exception as e2:
                print(f"⚠️ Porta 3000 falhou: {e2}")
                print("🔄 Tentando porta 5000 com configurações especiais...")

                # Última tentativa com configurações especiais
                app.run(
                    host="localhost",
                    port=5000,
                    debug=False,
                    use_reloader=False,
                    threaded=True,
                )

    except Exception as e:
        print(f"❌ Erro ao iniciar dashboard: {e}")
        print("\n💡 SOLUÇÕES PARA WINDOWS:")
        print("   1. Execute como administrador")
        print("   2. Desative temporariamente o Windows Defender")
        print("   3. Verifique configurações de firewall")
        print("   4. Use uma porta diferente")
        return False


def create_admin_script():
    """Cria script para executar como administrador"""
    print("📋 Criando script para administrador...")

    script_content = """@echo off
chcp 65001 >nul
title Dashboard Garimpeiro Geek - Administrador

echo.
echo ============================================================
echo 🚀 INICIADOR DO DASHBOARD GARIMPEIRO GEEK
echo ============================================================
echo.

:: Verifica se é administrador
net session >nul 2>&1
if %errorLevel% == 0 (
    echo ✅ Executando como administrador
) else (
    echo ⚠️ Não é administrador
    echo 🔧 Tentando elevar privilégios...
    powershell -Command "Start-Process cmd -ArgumentList '/c cd /d \"%~dp0\" && \"%~f0\"' -Verb RunAs"
    exit /b
)

:: Ativa ambiente virtual
if not defined VIRTUAL_ENV (
    echo 🔧 Ativando ambiente virtual...
    call "..\\venv\\Scripts\\activate.bat"
)

:: Inicia o dashboard
echo 🚀 Iniciando dashboard...
cd /d "%~dp0"
python start_windows_final.py

pause
"""

    script_path = Path(__file__).parent / "start_as_admin.bat"
    with open(script_path, "w", encoding="utf-8") as f:
        f.write(script_content)

    return script_path


def main():
    """Função principal"""
    print("=" * 70)
    print("🚀 SOLUÇÃO FINAL - DASHBOARD GARIMPEIRO GEEK")
    print("=" * 70)
    print()

    # Verifica se é Windows
    if os.name != "nt":
        print("❌ Este script é específico para Windows")
        sys.exit(1)

    print("🔍 DIAGNÓSTICO COMPLETO:")
    print("   O Windows está bloqueando conexões locais por segurança")
    print("   Isso é comum com Windows Defender, firewall e configurações de rede")
    print("   A solução é usar portas alternativas ou executar como administrador")
    print()

    # Verifica dependências
    try:
        import flask
        import sqlite3

        print("✅ Dependências básicas: OK")
    except ImportError as e:
        print(f"❌ Dependência não encontrada: {e}")
        print("💡 Execute: pip install flask sqlite3")
        sys.exit(1)

    # Verifica banco de dados
    try:
        db_path = project_root / "ofertas.db"
        if db_path.exists():
            import sqlite3

            conn = sqlite3.connect(str(db_path))
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM ofertas")
            count = cursor.fetchone()[0]
            conn.close()
            print(f"✅ Banco de dados: {count} ofertas")
        else:
            print("⚠️ Banco de dados não encontrado")
    except Exception as e:
        print(f"⚠️ Erro no banco: {e}")

    print("\n🔧 SOLUÇÕES DISPONÍVEIS:")
    print("1. 🚀 Iniciar dashboard (tentará múltiplas portas)")
    print("2. 📋 Criar script para executar como administrador")
    print("3. 🔄 Tentar porta específica (8080)")
    print("4. ❌ Sair")

    try:
        choice = input("\nEscolha (1-4): ").strip()
    except KeyboardInterrupt:
        print("\n🛑 Operação cancelada")
        sys.exit(0)

    if choice == "1":
        start_dashboard_windows()

    elif choice == "2":
        script_path = create_admin_script()
        print(f"✅ Script criado: {script_path}")
        print("💡 Execute este arquivo como administrador:")
        print("   - Clique com botão direito no arquivo")
        print("   - Selecione 'Executar como administrador'")
        print("   - Ou execute manualmente: start_as_admin.bat")

    elif choice == "3":
        print("🔄 Tentando porta 8080...")
        try:
            from app import app

            app.config["ENV"] = "production"
            app.config["DEBUG"] = False

            print("🚀 Iniciando na porta 8080...")
            print("🌐 Acesse: http://127.0.0.1:8080")

            app.run(
                host="127.0.0.1",
                port=8080,
                debug=False,
                use_reloader=False,
                threaded=True,
            )
        except Exception as e:
            print(f"❌ Falhou na porta 8080: {e}")

    elif choice == "4":
        print("👋 Saindo...")
        sys.exit(0)

    else:
        print("❌ Opção inválida")
        sys.exit(1)

    print("\n" + "=" * 70)
    print("🏁 SOLUÇÃO APLICADA")
    print("=" * 70)
    print("\n💡 SE O DASHBOARD FUNCIONAR:")
    print("   - Acesse: http://127.0.0.1:8080 (porta 8080)")
    print("   - Acesse: http://127.0.0.1:3000 (porta 3000)")
    print("   - Acesse: http://localhost:5000 (porta 5000)")
    print("\n💡 SE NÃO FUNCIONAR:")
    print("   - Execute o script como administrador")
    print("   - Desative temporariamente o Windows Defender")
    print("   - Verifique configurações de firewall")


if __name__ == "__main__":
    main()
