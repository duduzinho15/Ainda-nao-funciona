#!/usr/bin/env python3
"""
API Detalhada da Shopee
Usa a API oficial para extrair dados reais dos produtos
"""

import requests
import time
import logging
from typing import Optional, Dict, Any
import random

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class ShopeeDetailedAPI:
    """API detalhada da Shopee para extrair dados reais"""

    def __init__(self):
        self.session = requests.Session()

        # Headers para API da Shopee
        self.session.headers.update(
            {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                "Accept": "application/json, text/plain, */*",
                "Accept-Language": "pt-BR,pt;q=0.9,en;q=0.8",
                "Accept-Encoding": "gzip, deflate, br",
                "Connection": "keep-alive",
                "Referer": "https://shopee.com.br/",
                "Origin": "https://shopee.com.br",
            }
        )

        # Base URLs da API da Shopee
        self.api_base = "https://shopee.com.br/api/v4"
        self.search_api = "https://shopee.com.br/api/v4/search/search_items"

    def _add_delay(self):
        """Adiciona delay aleat√≥rio"""
        time.sleep(random.uniform(1, 2))

    def get_product_details(self, product_url: str) -> Optional[Dict[str, Any]]:
        """Extrai detalhes completos do produto usando m√∫ltiplas APIs"""
        try:
            logger.info(f"üîç Extraindo detalhes da Shopee: {product_url}")

            # Extrai IDs do produto da URL
            shop_id, item_id = self._extract_ids_from_url(product_url)
            if not shop_id or not item_id:
                logger.error("‚ùå N√£o foi poss√≠vel extrair IDs da URL")
                return None

            logger.info(f"   üìä Shop ID: {shop_id}, Item ID: {item_id}")

            # 1. TENTATIVA: API de detalhes do item
            item_details = self._get_item_details(shop_id, item_id)
            if item_details:
                logger.info(
                    f"‚úÖ Dados extra√≠dos via API de detalhes: {item_details.get('name', 'N/A')}"
                )
                return item_details

            # 2. TENTATIVA: API de busca por ID
            search_results = self._search_by_id(shop_id, item_id)
            if search_results:
                logger.info(
                    f"‚úÖ Dados extra√≠dos via API de busca: {search_results.get('name', 'N/A')}"
                )
                return search_results

            # 3. TENTATIVA: API de informa√ß√µes da loja + item
            shop_item_info = self._get_shop_item_info(shop_id, item_id)
            if shop_item_info:
                logger.info(
                    f"‚úÖ Dados extra√≠dos via API da loja: {shop_item_info.get('name', 'N/A')}"
                )
                return shop_item_info

            logger.warning("‚ö†Ô∏è Todas as APIs falharam")
            return None

        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair detalhes: {e}")
            return None

    def _extract_ids_from_url(self, product_url: str) -> tuple:
        """Extrai shop_id e item_id da URL do produto"""
        try:
            # Formato: https://shopee.com.br/product/366295833/18297606894
            if "/product/" in product_url:
                parts = product_url.split("/product/")[1].split("/")
                if len(parts) >= 2:
                    shop_id = parts[0].strip()
                    item_id = parts[1].strip()

                    # Remove par√¢metros extras se houver
                    if "?" in item_id:
                        item_id = item_id.split("?")[0]

                    return shop_id, item_id

            return None, None

        except Exception as e:
            logger.error(f"Erro ao extrair IDs: {e}")
            return None, None

    def _get_item_details(self, shop_id: str, item_id: str) -> Optional[Dict[str, Any]]:
        """API de detalhes do item"""
        try:
            self._add_delay()

            # M√∫ltiplas URLs de API para tentar
            api_urls = [
                f"{self.api_base}/item/get?itemid={item_id}&shopid={shop_id}",
                f"{self.api_base}/item/get?itemid={item_id}&shopid={shop_id}&version=1",
                f"{self.api_base}/item/get?itemid={item_id}&shopid={shop_id}&version=2",
                f"https://shopee.com.br/api/v4/item/get?itemid={item_id}&shopid={shop_id}",
                f"https://shopee.com.br/api/v4/item/get?itemid={item_id}&shopid={shop_id}&version=1",
            ]

            for api_url in api_urls:
                try:
                    logger.info(f"   üîç Tentando API: {api_url}")

                    response = self.session.get(api_url, timeout=15)

                    if response.status_code == 200:
                        api_data = response.json()
                        logger.info(f"   üìä Resposta da API: {api_data}")

                        if "data" in api_data and api_data["data"]:
                            item_data = api_data["data"]

                            data = {}
                            if "name" in item_data:
                                data["title"] = item_data["name"]

                            if "images" in item_data and item_data["images"]:
                                # Constr√≥i URL de imagem real da Shopee
                                image_hash = item_data["images"][0]
                                data["image_url"] = (
                                    f"https://cf.shopee.com.br/file/{image_hash}"
                                )

                            if "description" in item_data:
                                data["description"] = item_data["description"]

                            if data.get("title") and data.get("image_url"):
                                logger.info(f"   ‚úÖ API funcionou: {data['title']}")
                                return data

                    time.sleep(0.5)  # Pausa entre tentativas

                except Exception as e:
                    logger.debug(f"   ‚ö†Ô∏è API falhou: {e}")
                    continue

            return None

        except Exception as e:
            logger.debug(f"Erro na API de detalhes: {e}")
            return None

    def _search_by_id(self, shop_id: str, item_id: str) -> Optional[Dict[str, Any]]:
        """API de busca por ID do item"""
        try:
            self._add_delay()

            # Constr√≥i query de busca
            search_params = {
                "keyword": item_id,
                "limit": 20,
                "newest": 0,
                "order": "desc",
                "page_type": "search",
                "scenario": "PAGE_GLOBAL_SEARCH",
                "version": 2,
            }

            api_url = f"{self.search_api}"

            logger.info(f"   üîç Buscando por ID: {api_url}")

            response = self.session.get(api_url, params=search_params, timeout=15)

            if response.status_code == 200:
                search_data = response.json()

                if "items" in search_data and search_data["items"]:
                    # Procura pelo item espec√≠fico
                    for item in search_data["items"]:
                        if (
                            str(item.get("shopid")) == shop_id
                            and str(item.get("itemid")) == item_id
                        ):
                            data = {}
                            if "name" in item:
                                data["title"] = item["name"]

                            if "image" in item:
                                data["image_url"] = item["image"]

                            if "description" in item:
                                data["description"] = item["description"]

                            if data.get("title") and data.get("image_url"):
                                logger.info(
                                    f"   ‚úÖ Busca por ID funcionou: {data['title']}"
                                )
                                return data

            return None

        except Exception as e:
            logger.debug(f"Erro na busca por ID: {e}")
            return None

    def _get_shop_item_info(
        self, shop_id: str, item_id: str
    ) -> Optional[Dict[str, Any]]:
        """API de informa√ß√µes da loja + item"""
        try:
            self._add_delay()

            # Tenta obter informa√ß√µes da loja primeiro
            shop_api_url = f"{self.api_base}/shop/get?shopid={shop_id}"

            logger.info(f"   üîç Informa√ß√µes da loja: {shop_api_url}")

            response = self.session.get(shop_api_url, timeout=15)

            if response.status_code == 200:
                shop_data = response.json()

                # Agora tenta obter informa√ß√µes do item espec√≠fico
                item_api_url = (
                    f"{self.api_base}/item/get?itemid={item_id}&shopid={shop_id}"
                )

                item_response = self.session.get(item_api_url, timeout=15)

                if item_response.status_code == 200:
                    item_data = item_response.json()

                    if "data" in item_data and item_data["data"]:
                        item_info = item_data["data"]

                        data = {}
                        if "name" in item_info:
                            data["title"] = item_info["name"]

                        if "images" in item_info and item_info["images"]:
                            image_hash = item_info["images"][0]
                            data["image_url"] = (
                                f"https://cf.shopee.com.br/file/{image_hash}"
                            )

                        if "description" in item_info:
                            data["description"] = item_info["description"]

                        if data.get("title") and data.get("image_url"):
                            logger.info(f"   ‚úÖ Loja + Item funcionou: {data['title']}")
                            return data

            return None

        except Exception as e:
            logger.debug(f"Erro na API da loja: {e}")
            return None

    def test_image_url(self, image_url: str) -> bool:
        """Testa se a URL da imagem √© v√°lida"""
        try:
            response = self.session.head(image_url, timeout=10)
            return response.status_code == 200
        except:
            return False


def main():
    """Teste da API detalhada da Shopee"""
    print("üß™ TESTANDO API DETALHADA DA SHOPEE")
    print("=" * 60)

    api = ShopeeDetailedAPI()

    # URLs de teste da Shopee
    test_urls = [
        "https://shopee.com.br/product/366295833/18297606894",
        "https://shopee.com.br/product/1193388723/22193671026",
        "https://shopee.com.br/product/1096310433/23397649584",
    ]

    for i, url in enumerate(test_urls, 1):
        print(f"\nüîç Teste {i}: {url}")

        try:
            result = api.get_product_details(url)

            if result:
                print(f"   ‚úÖ T√≠tulo: {result.get('title', 'N/A')}")
                print(f"   ‚úÖ Imagem: {result.get('image_url', 'N/A')}")
                print(f"   ‚úÖ Descri√ß√£o: {result.get('description', 'N/A')}")

                # Testa a URL da imagem
                if result.get("image_url"):
                    is_valid = api.test_image_url(result["image_url"])
                    print(f"   üñºÔ∏è Imagem v√°lida: {'‚úÖ Sim' if is_valid else '‚ùå N√£o'}")
            else:
                print("   ‚ùå Falha na extra√ß√£o")

        except Exception as e:
            print(f"   ‚ùå Erro: {e}")

        print("-" * 40)

        # Pausa entre testes
        if i < len(test_urls):
            time.sleep(2)


if __name__ == "__main__":
    main()
