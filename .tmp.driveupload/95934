# tests/adapters_scrapers.py
from __future__ import annotations
from typing import List, Dict, Any
import aiohttp

# Importe seus scrapers reais aqui:
# Cada adaptador deve retornar List[dict] j√° no formato base do projeto.


async def run_promobit() -> List[Dict[str, Any]]:
    """Adaptador para o scraper do Promobit"""
    try:
        from promobit_scraper import buscar_ofertas_promobit

        # Cria sess√£o HTTP para o scraper
        async with aiohttp.ClientSession() as session:
            # Executa o scraper com par√¢metros corretos
            ofertas = await buscar_ofertas_promobit(
                session=session,
                max_paginas=1,  # Apenas 1 p√°gina para teste
                max_requests=3,  # Limita requisi√ß√µes para teste
            )

        # Converte para formato padr√£o se necess√°rio
        ofertas_padronizadas = []
        for oferta in ofertas:
            oferta_padrao = {
                "titulo": oferta.get("titulo", ""),
                "preco": oferta.get("preco_atual", oferta.get("preco", "")),
                "preco_original": oferta.get("preco_original", ""),
                "url_produto": oferta.get("url_produto", ""),
                "imagem_url": oferta.get("imagem_url", ""),
                "loja": oferta.get("loja", "Promobit"),
                "fonte": "Promobit",
                "desconto": oferta.get("desconto", 0),
            }
            ofertas_padronizadas.append(oferta_padrao)

        return ofertas_padronizadas
    except Exception as e:
        print(f"‚ùå Erro ao executar scraper Promobit: {e}")
        return []


async def run_pelando() -> List[Dict[str, Any]]:
    """Adaptador para o scraper do Pelando"""
    try:
        from pelando_scraper import buscar_ofertas_pelando

        # Cria sess√£o HTTP para o scraper
        async with aiohttp.ClientSession() as session:
            # Executa o scraper com par√¢metros corretos
            ofertas = await buscar_ofertas_pelando(
                session=session,
                max_paginas=1,  # Apenas 1 p√°gina para teste
            )

        # Converte para formato padr√£o se necess√°rio
        ofertas_padronizadas = []
        for oferta in ofertas:
            oferta_padrao = {
                "titulo": oferta.get("titulo", ""),
                "preco": oferta.get("preco_atual", oferta.get("preco", "")),
                "preco_original": oferta.get("preco_original", ""),
                "url_produto": oferta.get("url_produto", ""),
                "imagem_url": oferta.get("imagem_url", ""),
                "loja": oferta.get("loja", "Pelando"),
                "fonte": "Pelando",
                "desconto": oferta.get("desconto", 0),
            }
            ofertas_padronizadas.append(oferta_padrao)

        return ofertas_padronizadas
    except Exception as e:
        print(f"‚ùå Erro ao executar scraper Pelando: {e}")
        return []


async def run_shopee() -> List[Dict[str, Any]]:
    """Adaptador para o scraper da Shopee"""
    try:
        # product_scraper_ultimate.py ‚Äì ajuste para a fun√ß√£o correta
        from product_scraper_ultimate import UltimateProductScraper

        scraper = UltimateProductScraper()
        # Simula busca de produtos (ajuste conforme sua implementa√ß√£o)
        ofertas = []
        # Exemplo de oferta simulada para teste
        ofertas.append(
            {
                "titulo": "üì± Smartphone Teste Shopee",
                "preco": "R$ 599,99",
                "url_produto": "https://shopee.com.br/teste",
                "loja": "Shopee",
                "fonte": "product_scraper_ultimate",
                "imagem_url": "https://picsum.photos/400/300?random=shopee",
            }
        )
        return ofertas
    except Exception as e:
        print(f"‚ùå Erro ao executar scraper Shopee: {e}")
        return []


async def run_amazon() -> List[Dict[str, Any]]:
    """Adaptador para o scraper da Amazon"""
    try:
        from amazon_api import buscar_ofertas_amazon

        # Executa o scraper com par√¢metros corretos
        ofertas = await buscar_ofertas_amazon(
            palavras_chave=["smartphone"],  # Lista de palavras-chave para teste
            max_itens=5,  # Limita resultados para teste
        )

        # Converte para formato padr√£o se necess√°rio
        ofertas_padronizadas = []
        for oferta in ofertas:
            oferta_padrao = {
                "titulo": oferta.get("titulo", ""),
                "preco": oferta.get("preco", ""),
                "preco_original": oferta.get("preco_original", ""),
                "url_produto": oferta.get("url_produto", ""),
                "imagem_url": oferta.get("imagem_url", ""),
                "loja": "Amazon",
                "fonte": "amazon_api",
                "desconto": oferta.get("desconto", 0),
            }
            ofertas_padronizadas.append(oferta_padrao)

        return ofertas_padronizadas
    except Exception as e:
        print(f"‚ùå Erro ao executar scraper Amazon: {e}")
        return []


SCRAPER_ADAPTERS = {
    "promobit": run_promobit,
    "pelando": run_pelando,
    "shopee": run_shopee,
    "amazon": run_amazon,
}
