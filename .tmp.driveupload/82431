#!/usr/bin/env python3
"""
Script espec√≠fico para Windows que resolve problemas de firewall e permiss√µes
"""

import os
import sys
import subprocess
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def check_windows_firewall():
    """Verifica e configura o firewall do Windows"""
    print("üîç Verificando firewall do Windows...")

    try:
        # Verifica se a porta 5000 est√° bloqueada
        result = subprocess.run(
            ["netsh", "advfirewall", "firewall", "show", "rule", "name=all"],
            capture_output=True,
            text=True,
            shell=True,
        )

        if "5000" in result.stdout:
            print("‚úÖ Porta 5000 j√° configurada no firewall")
        else:
            print("‚ö†Ô∏è Porta 5000 n√£o configurada no firewall")
            print("üîß Configurando firewall...")

            # Adiciona regra para permitir porta 5000
            subprocess.run(
                [
                    "netsh",
                    "advfirewall",
                    "firewall",
                    "add",
                    "rule",
                    "name=Flask Dashboard",
                    "dir=in",
                    "action=allow",
                    "protocol=TCP",
                    "localport=5000",
                ],
                shell=True,
            )

            print("‚úÖ Firewall configurado para porta 5000")

    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao configurar firewall: {e}")
        print("üí° Execute como administrador se necess√°rio")


def start_with_waitress_windows():
    """Inicia com Waitress otimizado para Windows"""
    print("üöÄ Iniciando com Waitress (otimizado para Windows)...")

    try:
        from app import app
        import waitress

        # Configura√ß√µes espec√≠ficas para Windows
        waitress.serve(
            app,
            host="127.0.0.1",
            port=5000,
            threads=2,
            connection_limit=100,
            cleanup_interval=30,
            channel_timeout=120,
            log_socket_errors=True,
        )

    except ImportError:
        print("‚ùå Waitress n√£o instalado")
        return False
    except Exception as e:
        print(f"‚ùå Erro com Waitress: {e}")
        return False


def start_with_flask_windows():
    """Inicia com Flask otimizado para Windows"""
    print("üöÄ Iniciando com Flask (otimizado para Windows)...")

    try:
        from app import app

        # Configura√ß√µes espec√≠ficas para Windows
        app.config["ENV"] = "production"
        app.config["DEBUG"] = False
        app.config["TESTING"] = False

        app.run(
            host="127.0.0.1",
            port=5000,
            debug=False,
            use_reloader=False,
            threaded=True,
            processes=1,
        )

    except Exception as e:
        print(f"‚ùå Erro com Flask: {e}")
        return False


def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üöÄ DASHBOARD GARIMPEIRO GEEK - VERS√ÉO WINDOWS")
    print("=" * 60)

    # Verifica se √© Windows
    if os.name != "nt":
        print("‚ùå Este script √© espec√≠fico para Windows")
        sys.exit(1)

    # Verifica depend√™ncias
    try:
        import flask
        import sqlite3

        print("‚úÖ Depend√™ncias b√°sicas dispon√≠veis")
    except ImportError as e:
        print(f"‚ùå Depend√™ncia n√£o encontrada: {e}")
        print("üí° Execute: pip install flask sqlite3")
        sys.exit(1)

    # Verifica banco de dados
    try:
        db_path = project_root / "ofertas.db"
        if db_path.exists():
            import sqlite3

            conn = sqlite3.connect(str(db_path))
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM ofertas")
            count = cursor.fetchone()[0]
            conn.close()
            print(f"‚úÖ Banco de dados: {count} ofertas")
        else:
            print("‚ö†Ô∏è Banco de dados n√£o encontrado")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no banco: {e}")

    # Configura firewall
    check_windows_firewall()

    print("\nüîß Escolha o m√©todo de execu√ß√£o:")
    print("1. Flask (otimizado para Windows)")
    print("2. Waitress (recomendado para Windows)")
    print("3. Auto-detect")

    try:
        choice = input("\nEscolha (1-3) ou Enter para auto-detect: ").strip()
    except KeyboardInterrupt:
        print("\nüõë Opera√ß√£o cancelada")
        sys.exit(0)

    if not choice:
        choice = "3"

    print(f"\nüéØ M√©todo selecionado: {choice}")

    success = False

    if choice == "1":
        success = start_with_flask_windows()
    elif choice == "2":
        success = start_with_waitress_windows()
    elif choice == "3":
        # Auto-detect: tenta Waitress primeiro
        print("üîç Auto-detectando melhor m√©todo...")
        if not start_with_waitress_windows():
            print("‚ö†Ô∏è Waitress falhou, tentando Flask...")
            success = start_with_flask_windows()
        else:
            success = True
    else:
        print("‚ùå Op√ß√£o inv√°lida")
        sys.exit(1)

    if not success:
        print("\n‚ùå Todos os m√©todos falharam")
        print("\nüí° SOLU√á√ïES PARA WINDOWS:")
        print("   1. Execute como administrador")
        print("   2. Verifique o Windows Defender")
        print("   3. Desative temporariamente o firewall")
        print("   4. Use uma porta diferente (8080, 3000)")
        print("   5. Verifique se o antiv√≠rus est√° bloqueando")

        # Tenta porta alternativa
        print("\nüîÑ Tentando porta alternativa (8080)...")
        try:
            from app import app

            print("üöÄ Iniciando na porta 8080...")
            app.run(host="127.0.0.1", port=8080, debug=False, use_reloader=False)
        except Exception as e:
            print(f"‚ùå Tamb√©m falhou na porta 8080: {e}")

    print("\nüåê Se funcionar, acesse:")
    print("   - http://127.0.0.1:5000")
    print("   - http://localhost:5000")
    print("   - http://127.0.0.1:8080 (se usar porta alternativa)")


if __name__ == "__main__":
    main()
